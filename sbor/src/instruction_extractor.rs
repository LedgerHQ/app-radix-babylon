// Process events received from decoder and extract data related to instructions

use crate::instruction::{to_instruction, InstructionInfo};
use crate::sbor_notifications::SborEvent;
use crate::type_info::{to_type_info, TypeKind, TYPE_ARRAY, TYPE_ENUM, TYPE_NONE, TYPE_TUPLE};

#[repr(u8)]
#[derive(Copy, Clone, Debug, Eq, PartialEq)]
pub enum ExtractorPhase {
    Init,
    IntentShell,
    HeaderShell,
    ManifestShell,
    ManifestContentShell,
    InstructionsShell,
    Instruction,
    InstructionType,
    InstructionParameter,
    Done,
}

#[repr(u8)]
#[derive(Copy, Clone, Debug, Eq, PartialEq)]
pub enum InstructionPhase {
    WaitForDiscriminator,
    WaitForParameterCount,
    Done,
}

#[repr(u8)]
#[derive(Copy, Clone, Debug)]
pub enum ExtractorEvent {
    InstructionStart(InstructionInfo),
    ParameterStart(TypeKind),
    ParameterData(SborEvent),
    ParameterEnd(u32),
    InstructionEnd(SborEvent, ExtractorPhase),
    Notify(SborEvent, ExtractorPhase),
    NextPhase(ExtractorPhase),
    WrongParameterCount(u32, u32),
    UnknownInstruction(u8),
    InvalidEventSequence,
    UnknownParameterType(u8),
}

pub trait InstructionHandler {
    fn handle(&mut self, event: ExtractorEvent);
}

pub struct InstructionExtractor {
    phase: ExtractorPhase,
    instruction_phase: InstructionPhase,
    parameter_count: u32,
    parameters_total: u32,
    discriminator: u8,
}

impl InstructionExtractor {
    pub fn new() -> Self {
        Self {
            phase: ExtractorPhase::Init,
            instruction_phase: InstructionPhase::Done,
            parameter_count: 0,
            parameters_total: 0,
            discriminator: 0,
        }
    }

    pub fn handle_event(&mut self, handler: &mut impl InstructionHandler, event: SborEvent) {
        match self.phase {
            ExtractorPhase::Init => {
                self.expect_start(event, TYPE_TUPLE, 0, ExtractorPhase::IntentShell);
            }
            ExtractorPhase::IntentShell => {
                self.expect_start(event, TYPE_TUPLE, 1, ExtractorPhase::HeaderShell);
            }
            ExtractorPhase::HeaderShell => {
                self.expect_start(event, TYPE_TUPLE, 2, ExtractorPhase::ManifestShell);
            }
            ExtractorPhase::ManifestShell => {
                self.expect_start(event, TYPE_TUPLE, 3, ExtractorPhase::ManifestContentShell);
            }
            ExtractorPhase::ManifestContentShell => {
                self.expect_start(event, TYPE_TUPLE, 3, ExtractorPhase::InstructionsShell);
            }
            ExtractorPhase::InstructionsShell => {
                self.expect_start(event, TYPE_ARRAY, 4, ExtractorPhase::Instruction);
            }
            ExtractorPhase::Instruction => {
                let started =
                    self.expect_start(event, TYPE_ENUM, 5, ExtractorPhase::InstructionType);

                if started {
                    self.instruction_phase = InstructionPhase::WaitForDiscriminator;
                    self.parameter_count = 0;
                    self.parameters_total = 0;
                }

                self.expect_end(event, TYPE_NONE, 4, ExtractorPhase::Done);
            }
            ExtractorPhase::InstructionType => {
                if !self.process_instruction_state(handler, event) {
                    return;
                }

                let started =
                    self.expect_start(event, TYPE_NONE, 6, ExtractorPhase::InstructionParameter);

                if started {
                    if let SborEvent::Start { type_id, .. } = event {
                        match to_type_info(type_id) {
                            Some(type_info) => {
                                handler.handle(ExtractorEvent::ParameterStart(type_info.type_kind))
                            }

                            None => {
                                handler.handle(ExtractorEvent::UnknownParameterType(type_id));
                                self.phase = ExtractorPhase::Done;
                                return;
                            }
                        }
                    } else {
                        // Something wrong with instruction encoding
                        handler.handle(ExtractorEvent::InvalidEventSequence);
                        self.phase = ExtractorPhase::Done;
                        return;
                    }

                    if self.instruction_phase == InstructionPhase::Done {
                        self.parameter_count += 1;
                    }
                }

                self.expect_end(event, TYPE_NONE, 5, ExtractorPhase::Instruction);
            }

            ExtractorPhase::InstructionParameter => {
                let ended = self.expect_end(event, TYPE_NONE, 6, ExtractorPhase::InstructionType);

                if ended {
                    handler.handle(ExtractorEvent::ParameterEnd(self.parameter_count));
                } else {
                    handler.handle(ExtractorEvent::ParameterData(event));
                }
            }
            ExtractorPhase::Done => {}
        }
    }

    fn process_instruction_state(
        &mut self,
        handler: &mut impl InstructionHandler,
        event: SborEvent,
    ) -> bool {
        match (self.instruction_phase, event) {
            (InstructionPhase::WaitForDiscriminator, SborEvent::Discriminator(discriminator)) => {
                self.discriminator = discriminator;
                self.instruction_phase = InstructionPhase::WaitForParameterCount;
            }
            (InstructionPhase::WaitForParameterCount, SborEvent::Len(len)) => {
                match to_instruction(self.discriminator) {
                    Some(info) => {
                        if len != info.1 as u32 {
                            handler.handle(ExtractorEvent::WrongParameterCount(info.1 as u32, len));
                            self.phase = ExtractorPhase::Done;
                            return false;
                        }

                        handler.handle(ExtractorEvent::InstructionStart(info));
                        self.parameters_total = len;
                        self.instruction_phase = InstructionPhase::Done;
                    }
                    None => {
                        // Unknown instruction
                        handler.handle(ExtractorEvent::UnknownInstruction(self.discriminator));
                        self.phase = ExtractorPhase::Done;
                        return false;
                    }
                }
            }
            _ => {}
        };
        true
    }

    fn expect_start(
        &mut self,
        event: SborEvent,
        expected_type: u8,
        nesting: u8,
        next_phase: ExtractorPhase,
    ) -> bool {
        match event {
            SborEvent::Start {
                type_id,
                nesting_level,
                fixed_size: _u8,
            } if (type_id == expected_type || expected_type == TYPE_NONE)
                && nesting_level == nesting =>
            {
                self.phase = next_phase;
                true
            }
            _ => false,
        }
    }

    fn expect_end(
        &mut self,
        event: SborEvent,
        expected_type: u8,
        nesting: u8,
        next_phase: ExtractorPhase,
    ) -> bool {
        match event {
            SborEvent::End {
                type_id,
                nesting_level,
            } if (type_id == expected_type || expected_type == TYPE_NONE)
                && nesting_level == nesting =>
            {
                self.phase = next_phase;
                true
            }
            _ => false,
        }
    }
}
//todo!("Add tests; Add test for chunked data reporting!");
#[cfg(test)]
mod tests {
    use crate::instruction_extractor::{ExtractorEvent, InstructionExtractor, InstructionHandler};
    use crate::sbor_decoder::{DecodingOutcome, SborDecoder, SborEventHandler};
    use crate::sbor_notifications::SborEvent;

    struct InstructionProcessor {
        extractor: InstructionExtractor,
        handler: InstructionFormatter,
    }

    struct InstructionFormatter {
        instruction_count: u32,
    }

    impl InstructionProcessor {
        pub fn new() -> Self {
            Self {
                extractor: InstructionExtractor::new(),
                handler: InstructionFormatter::new(),
            }
        }
    }

    impl InstructionFormatter {
        pub fn new() -> Self {
            Self {
                instruction_count: 0,
            }
        }
    }

    impl SborEventHandler for InstructionProcessor {
        fn handle(&mut self, evt: SborEvent) {
            self.extractor.handle_event(&mut self.handler, evt);
        }
    }

    impl InstructionHandler for InstructionFormatter {
        fn handle(&mut self, event: ExtractorEvent) {
            if let ExtractorEvent::InstructionStart(..) = event {
                self.instruction_count += 1;
            }

            // if let ExtractorEvent::ParameterData(..) = event {
            //     return;
            // }
            println!("Event: {:?}", event);
        }
    }

    const CHUNK_SIZE: usize = 113;

    fn check_partial_decoding(input: &[u8]) {
        let mut decoder = SborDecoder::new(true);
        let mut handler = InstructionProcessor::new();

        let mut start = 0;
        let mut end = CHUNK_SIZE;

        while start < input.len() {
            match decoder.decode(&mut handler, &input[start..end]) {
                Ok(outcome) => {
                    if end - start == CHUNK_SIZE {
                        assert_eq!(outcome, DecodingOutcome::NeedMoreData(end));
                    } else {
                        assert_eq!(outcome, DecodingOutcome::Done(input.len()))
                    }
                }
                Err(err) => {
                    assert!(false, "Should not return an error {:?}", err)
                }
            }

            start += CHUNK_SIZE;
            end += CHUNK_SIZE;

            if end > input.len() {
                end = input.len();
            }
        }

        println!("Total {} instructions", handler.handler.instruction_count);
        println!();
    }

    #[test]
    pub fn test_access_rule1() {
        let input: [u8; 217] = [
            0x5c, 0x21, // tuple
            0x02, // 2 elements
            0x21, //  tuple 0 // Transaction header
            0x02, //  2 elements
            0x21, //    tuple 0
            0x02, //    2 elements
            0x21, //      tuple 0
            0x09, //      9 elements
            0x07, //        u8          0   // version
            0x01, //        value
            0x07, //        u8          1   // network_id
            0x01, //        value
            0x0a, //        u64         2   // start epoch
            0xe1, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // value
            0x0a, //        u64         3   // end epoch
            0x46, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // value
            0x0a, //        u64         4   // nonce
            0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // value
            0x22, //        enum        5   // notary public key
            0x00, //        discriminator
            0x01, //        1 field
            0xb1, //          secp256k1 public key
            0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xce,
            0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59, 0xf2, 0x81,
            0x5b, 0x16, 0xf8, 0x17, 0x98, //          value (33 bytes)
            0x01, //        bool        6 // notary as signatory
            0x01, //        value
            0x09, //        u32         7 // cost unit limit
            0x40, 0x42, 0x0f, 0x00, // value
            0x08, //        u16         8 // tip percentage
            0x05, 0x00, //  value
            0x21, //  tuple 1 // Transaction manifest
            0x02, //    2 elements
            0x20, //      array 0 // instructions
            0x22, //      element type id (enum)
            0x01, //      1 element
            0x1a, //        element 0 discriminator (SetMethodAccessRule)
            0x04, //        4 fields
            0x22, //          enum 0
            0x00, //          discriminator (GlobalAddress::Component)
            0x01, //            1 parameter
            0x81, //              parameter type (component address)
            0x02, //              discriminator
            0x92, 0x56, 0x6c, 0x83, 0xde, 0x7f, 0xd6, 0xb0, 0x4f, 0xcc, 0x92, 0xb5, 0xe0, 0x4b,
            0x03, 0x22, 0x8c, 0xcf, 0xf0, 0x40, 0x78, 0x56, 0x73, 0x27, 0x8e,
            0xf1, // value (26 bytes)
            0x09, //          u32 1
            0x00, 0x00, 0x00, 0x00, // value
            0x22, //          enum 2
            0x00, //          discriminator
            0x01, //            1 parameter
            0x0c, //              string
            0x04, //                len 4
            0x74, 0x65, 0x73, 0x74, // value
            0x22, //          enum 3
            0x00, //          discriminator (AccessRule::AllowAll)
            0x00, //          no fields
            0x20, 0x20, 0x00, 0x20, 0x22, 0x00, 0x22, 0x00, 0x01, 0xb2, 0x01, 0x46, 0x2d, 0x52,
            0xd7, 0x16, 0x75, 0x27, 0x23, 0x2d, 0x37, 0xac, 0xde, 0x9b, 0x86, 0xfa, 0x02, 0x32,
            0x88, 0x74, 0x18, 0xfe, 0x88, 0xe8, 0xf2, 0xa2, 0xf6, 0xff, 0xdc, 0xcc, 0xc3, 0x9a,
            0xa0, 0x17, 0xfa, 0x9d, 0xca, 0x6c, 0x60, 0xf3, 0xb5, 0x8d, 0xa4, 0x41, 0x31, 0x47,
            0x16, 0x71, 0xa6, 0xc3, 0xcd, 0xb4, 0x89, 0xfb, 0xbc, 0xc9, 0x17, 0x20, 0x23, 0x1a,
            0xb6, 0xd8, 0x9f, 0xe9, 0xbe,
        ];
        check_partial_decoding(&input);
    }

    #[test]
    pub fn test_access_rule2() {
        let input: [u8; 300] = [
            0x5c, 0x21, 0x02, 0x21, 0x02, 0x21, 0x02, 0x21, 0x09, 0x07, 0x01, 0x07, 0x01, 0x0a,
            0xe1, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x46, 0x05, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x0a, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00,
            0x01, 0xb1, 0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62,
            0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59,
            0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x01, 0x01, 0x09, 0x40, 0x42, 0x0f, 0x00,
            0x08, 0x05, 0x00, 0x21, 0x02, 0x20, 0x22, 0x02, 0x25, 0x03, 0x81, 0x03, 0xa1, 0x66,
            0xd4, 0x14, 0x93, 0x48, 0xe4, 0xbb, 0x49, 0xf4, 0xbe, 0xed, 0xe0, 0x81, 0x51, 0x8c,
            0x0a, 0x9f, 0x9c, 0x70, 0xf9, 0x87, 0xbe, 0x26, 0x55, 0xb1, 0x0c, 0x08, 0x6c, 0x6f,
            0x63, 0x6b, 0x5f, 0x66, 0x65, 0x65, 0x20, 0x07, 0x24, 0x5c, 0x21, 0x01, 0xb5, 0x00,
            0x00, 0xe8, 0x89, 0x04, 0x23, 0xc7, 0x8a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x23, 0x01, 0x22, 0x02, 0x01, 0x22, 0x00, 0x01, 0x22, 0x00, 0x01,
            0x22, 0x00, 0x01, 0x21, 0x02, 0x82, 0x00, 0x53, 0xf1, 0xc3, 0xe2, 0x0c, 0xc2, 0x38,
            0x35, 0x5e, 0x23, 0xb0, 0x1d, 0xec, 0xbb, 0x00, 0xa7, 0x88, 0x5c, 0x2a, 0x82, 0x64,
            0x8d, 0x5e, 0x85, 0x9d, 0x4f, 0xb7, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x01, 0x20, 0x20, 0x00, 0x20, 0x22, 0x00, 0x22, 0x00, 0x01, 0xb2, 0x00, 0xa5, 0xa1,
            0x62, 0x47, 0xd1, 0x18, 0x13, 0xeb, 0xda, 0x57, 0x23, 0x89, 0x09, 0x82, 0x04, 0xff,
            0xe3, 0xcb, 0x94, 0x1a, 0xb3, 0xf6, 0x62, 0x75, 0xbe, 0x94, 0x8b, 0xca, 0x54, 0xb7,
            0x71, 0x4e, 0x2d, 0x71, 0x3c, 0xa3, 0xb8, 0x6b, 0x10, 0x20, 0xe9, 0x38, 0x85, 0x48,
            0xe8, 0xb2, 0xc2, 0x12, 0xfa, 0xd2, 0x13, 0x84, 0x0e, 0x74, 0xd7, 0x32, 0x35, 0xd6,
            0x1f, 0xde, 0xa5, 0xf2, 0xcd, 0x3d,
        ];
        check_partial_decoding(&input);
    }

    #[test]
    pub fn test_create_fungible_resource_with_initial_supply() {
        let input: [u8; 446] = [
            0x5c, 0x21, 0x02, 0x21, 0x02, 0x21, 0x02, 0x21, 0x09, 0x07, 0x01, 0x07, 0x01, 0x0a,
            0xe1, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x46, 0x05, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x0a, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00,
            0x01, 0xb1, 0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62,
            0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59,
            0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x01, 0x01, 0x09, 0x40, 0x42, 0x0f, 0x00,
            0x08, 0x05, 0x00, 0x21, 0x02, 0x20, 0x22, 0x03, 0x25, 0x03, 0x81, 0x03, 0xa1, 0x66,
            0xd4, 0x14, 0x93, 0x48, 0xe4, 0xbb, 0x49, 0xf4, 0xbe, 0xed, 0xe0, 0x81, 0x51, 0x8c,
            0x0a, 0x9f, 0x9c, 0x70, 0xf9, 0x87, 0xbe, 0x26, 0x55, 0xb1, 0x0c, 0x08, 0x6c, 0x6f,
            0x63, 0x6b, 0x5f, 0x66, 0x65, 0x65, 0x20, 0x07, 0x24, 0x5c, 0x21, 0x01, 0xb5, 0x00,
            0x00, 0xe8, 0x89, 0x04, 0x23, 0xc7, 0x8a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x1e, 0x04, 0x07, 0x12, 0x23, 0x0c, 0x0c, 0x03, 0x0b, 0x64, 0x65,
            0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x41, 0x20, 0x76, 0x65,
            0x72, 0x79, 0x20, 0x69, 0x6e, 0x6e, 0x6f, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x20,
            0x61, 0x6e, 0x64, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x20,
            0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x0a,
            0x4d, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x06, 0x73, 0x79, 0x6d,
            0x62, 0x6f, 0x6c, 0x04, 0x52, 0x53, 0x52, 0x43, 0x23, 0x22, 0x21, 0x02, 0x04, 0x00,
            0x02, 0x22, 0x00, 0x00, 0x22, 0x01, 0x00, 0x05, 0x00, 0x02, 0x22, 0x00, 0x00, 0x22,
            0x01, 0x00, 0x22, 0x01, 0x01, 0xb5, 0x00, 0x00, 0xb0, 0xd8, 0x6b, 0x90, 0x88, 0xa6,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x03, 0x81, 0x03,
            0xa1, 0x66, 0xd4, 0x14, 0x93, 0x48, 0xe4, 0xbb, 0x49, 0xf4, 0xbe, 0xed, 0xe0, 0x81,
            0x51, 0x8c, 0x0a, 0x9f, 0x9c, 0x70, 0xf9, 0x87, 0xbe, 0x26, 0x55, 0xb1, 0x0c, 0x0d,
            0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x20,
            0x07, 0x05, 0x5c, 0x21, 0x01, 0xa2, 0x00, 0x20, 0x20, 0x00, 0x20, 0x22, 0x00, 0x22,
            0x00, 0x01, 0xb2, 0x01, 0xaf, 0xab, 0xa6, 0xf1, 0x88, 0xd8, 0xb9, 0x30, 0x1f, 0x22,
            0xa4, 0x26, 0x73, 0xe4, 0x07, 0x7a, 0xa6, 0xeb, 0x98, 0x9c, 0x59, 0xf7, 0xef, 0x4a,
            0xdf, 0x78, 0xa5, 0xd9, 0xd6, 0xa8, 0xa9, 0xc9, 0x49, 0xa0, 0x94, 0x4b, 0xe4, 0x40,
            0x18, 0x02, 0x70, 0x90, 0xc3, 0xf6, 0x28, 0x69, 0x90, 0x15, 0x4b, 0xed, 0x82, 0xe2,
            0xfc, 0x5c, 0x32, 0xc1, 0xe3, 0xf0, 0x76, 0x8b, 0x1c, 0xc4, 0x17, 0x88,
        ];
        check_partial_decoding(&input);
    }

    #[test]
    pub fn test_create_fungible_resource_with_initial_supply_with_owner() {
        let input: [u8; 464] = [
            0x5c, 0x21, 0x02, 0x21, 0x02, 0x21, 0x02, 0x21, 0x09, 0x07, 0x01, 0x07, 0x01, 0x0a,
            0xe1, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x46, 0x05, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x0a, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00,
            0x01, 0xb1, 0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62,
            0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59,
            0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x01, 0x01, 0x09, 0x40, 0x42, 0x0f, 0x00,
            0x08, 0x05, 0x00, 0x21, 0x02, 0x20, 0x22, 0x03, 0x25, 0x03, 0x81, 0x03, 0xa1, 0x66,
            0xd4, 0x14, 0x93, 0x48, 0xe4, 0xbb, 0x49, 0xf4, 0xbe, 0xed, 0xe0, 0x81, 0x51, 0x8c,
            0x0a, 0x9f, 0x9c, 0x70, 0xf9, 0x87, 0xbe, 0x26, 0x55, 0xb1, 0x0c, 0x08, 0x6c, 0x6f,
            0x63, 0x6b, 0x5f, 0x66, 0x65, 0x65, 0x20, 0x07, 0x24, 0x5c, 0x21, 0x01, 0xb5, 0x00,
            0x00, 0xe8, 0x89, 0x04, 0x23, 0xc7, 0x8a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x1f, 0x04, 0x07, 0x12, 0x23, 0x0c, 0x0c, 0x03, 0x0b, 0x64, 0x65,
            0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x41, 0x20, 0x76, 0x65,
            0x72, 0x79, 0x20, 0x69, 0x6e, 0x6e, 0x6f, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x20,
            0x61, 0x6e, 0x64, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x20,
            0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x0a,
            0x4d, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x06, 0x73, 0x79, 0x6d,
            0x62, 0x6f, 0x6c, 0x04, 0x52, 0x53, 0x52, 0x43, 0x21, 0x02, 0x82, 0x00, 0x10, 0xc0,
            0x88, 0xe0, 0xf1, 0x03, 0x9e, 0x64, 0x18, 0x65, 0x40, 0xbb, 0xc1, 0x9e, 0xc8, 0x96,
            0x7b, 0x97, 0x71, 0x6e, 0x43, 0xb0, 0x01, 0xde, 0x0e, 0x2b, 0xb7, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x22, 0x01, 0x01, 0xb5, 0x00, 0x00, 0xb0, 0xd8,
            0x6b, 0x90, 0x88, 0xa6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x25, 0x03, 0x81, 0x03, 0xa1, 0x66, 0xd4, 0x14, 0x93, 0x48, 0xe4, 0xbb, 0x49, 0xf4,
            0xbe, 0xed, 0xe0, 0x81, 0x51, 0x8c, 0x0a, 0x9f, 0x9c, 0x70, 0xf9, 0x87, 0xbe, 0x26,
            0x55, 0xb1, 0x0c, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x62, 0x61,
            0x74, 0x63, 0x68, 0x20, 0x07, 0x05, 0x5c, 0x21, 0x01, 0xa2, 0x00, 0x20, 0x20, 0x00,
            0x20, 0x22, 0x00, 0x22, 0x00, 0x01, 0xb2, 0x01, 0x28, 0x6a, 0x63, 0xf2, 0x9c, 0x21,
            0x1a, 0xb4, 0xee, 0x37, 0xd7, 0x05, 0x36, 0x2c, 0xb2, 0x05, 0x0e, 0x8e, 0xf3, 0xde,
            0xbf, 0xa2, 0xa1, 0x3e, 0xfa, 0xdd, 0x6d, 0xb5, 0xa2, 0x9c, 0x69, 0x0e, 0x71, 0x03,
            0xdd, 0x8f, 0x73, 0xfb, 0x4b, 0xe7, 0x2f, 0x8f, 0x18, 0x1b, 0x2d, 0x94, 0x98, 0xc1,
            0xcc, 0xbc, 0xdd, 0x34, 0x17, 0x75, 0x17, 0xfa, 0xa6, 0x04, 0x8c, 0x96, 0xcf, 0x7e,
            0x53, 0xf1,
        ];
        check_partial_decoding(&input);
    }

    #[test]
    pub fn test_create_fungible_resource_with_no_initial_supply() {
        let input: [u8; 360] = [
            0x5c, 0x21, 0x02, 0x21, 0x02, 0x21, 0x02, 0x21, 0x09, 0x07, 0x01, 0x07, 0x01, 0x0a,
            0xe1, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x46, 0x05, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x0a, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00,
            0x01, 0xb1, 0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62,
            0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59,
            0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x01, 0x01, 0x09, 0x40, 0x42, 0x0f, 0x00,
            0x08, 0x05, 0x00, 0x21, 0x02, 0x20, 0x22, 0x02, 0x25, 0x03, 0x81, 0x03, 0xa1, 0x66,
            0xd4, 0x14, 0x93, 0x48, 0xe4, 0xbb, 0x49, 0xf4, 0xbe, 0xed, 0xe0, 0x81, 0x51, 0x8c,
            0x0a, 0x9f, 0x9c, 0x70, 0xf9, 0x87, 0xbe, 0x26, 0x55, 0xb1, 0x0c, 0x08, 0x6c, 0x6f,
            0x63, 0x6b, 0x5f, 0x66, 0x65, 0x65, 0x20, 0x07, 0x24, 0x5c, 0x21, 0x01, 0xb5, 0x00,
            0x00, 0xe8, 0x89, 0x04, 0x23, 0xc7, 0x8a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x1e, 0x04, 0x07, 0x12, 0x23, 0x0c, 0x0c, 0x03, 0x0b, 0x64, 0x65,
            0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x41, 0x20, 0x76, 0x65,
            0x72, 0x79, 0x20, 0x69, 0x6e, 0x6e, 0x6f, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x20,
            0x61, 0x6e, 0x64, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x20,
            0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x0a,
            0x4d, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x06, 0x73, 0x79, 0x6d,
            0x62, 0x6f, 0x6c, 0x04, 0x52, 0x53, 0x52, 0x43, 0x23, 0x22, 0x21, 0x02, 0x04, 0x00,
            0x02, 0x22, 0x00, 0x00, 0x22, 0x01, 0x00, 0x05, 0x00, 0x02, 0x22, 0x00, 0x00, 0x22,
            0x01, 0x00, 0x22, 0x00, 0x00, 0x20, 0x20, 0x00, 0x20, 0x22, 0x00, 0x22, 0x00, 0x01,
            0xb2, 0x00, 0x6b, 0x44, 0xd1, 0x1d, 0x86, 0xef, 0x26, 0x25, 0x3b, 0x7e, 0xff, 0x17,
            0xb1, 0x3f, 0x11, 0x2b, 0xaa, 0x61, 0x7e, 0xb8, 0x86, 0x72, 0x64, 0x44, 0xd6, 0xd4,
            0x81, 0x46, 0x6a, 0x03, 0x6d, 0xc5, 0x3f, 0xb7, 0x3f, 0x6e, 0x23, 0x3a, 0x20, 0x33,
            0xe5, 0xfe, 0xab, 0xba, 0x06, 0xd2, 0x31, 0x45, 0x47, 0x72, 0xec, 0xe6, 0x8d, 0xfd,
            0x30, 0x16, 0xc1, 0x11, 0x40, 0xf3, 0x61, 0x1b, 0xdf, 0x23,
        ];
        check_partial_decoding(&input);
    }

    #[test]
    pub fn test_create_fungible_resource_with_no_initial_supply_with_owner() {
        let input: [u8; 378] = [
            0x5c, 0x21, 0x02, 0x21, 0x02, 0x21, 0x02, 0x21, 0x09, 0x07, 0x01, 0x07, 0x01, 0x0a,
            0xe1, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x46, 0x05, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x0a, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00,
            0x01, 0xb1, 0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62,
            0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59,
            0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x01, 0x01, 0x09, 0x40, 0x42, 0x0f, 0x00,
            0x08, 0x05, 0x00, 0x21, 0x02, 0x20, 0x22, 0x02, 0x25, 0x03, 0x81, 0x03, 0xa1, 0x66,
            0xd4, 0x14, 0x93, 0x48, 0xe4, 0xbb, 0x49, 0xf4, 0xbe, 0xed, 0xe0, 0x81, 0x51, 0x8c,
            0x0a, 0x9f, 0x9c, 0x70, 0xf9, 0x87, 0xbe, 0x26, 0x55, 0xb1, 0x0c, 0x08, 0x6c, 0x6f,
            0x63, 0x6b, 0x5f, 0x66, 0x65, 0x65, 0x20, 0x07, 0x24, 0x5c, 0x21, 0x01, 0xb5, 0x00,
            0x00, 0xe8, 0x89, 0x04, 0x23, 0xc7, 0x8a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x1f, 0x04, 0x07, 0x12, 0x23, 0x0c, 0x0c, 0x03, 0x0b, 0x64, 0x65,
            0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x41, 0x20, 0x76, 0x65,
            0x72, 0x79, 0x20, 0x69, 0x6e, 0x6e, 0x6f, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x20,
            0x61, 0x6e, 0x64, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x20,
            0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x0a,
            0x4d, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x06, 0x73, 0x79, 0x6d,
            0x62, 0x6f, 0x6c, 0x04, 0x52, 0x53, 0x52, 0x43, 0x21, 0x02, 0x82, 0x00, 0x10, 0xc0,
            0x88, 0xe0, 0xf1, 0x03, 0x9e, 0x64, 0x18, 0x65, 0x40, 0xbb, 0xc1, 0x9e, 0xc8, 0x96,
            0x7b, 0x97, 0x71, 0x6e, 0x43, 0xb0, 0x01, 0xde, 0x0e, 0x2b, 0xb7, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x22, 0x00, 0x00, 0x20, 0x20, 0x00, 0x20, 0x22,
            0x00, 0x22, 0x00, 0x01, 0xb2, 0x00, 0x69, 0x1d, 0x9f, 0x54, 0xa2, 0x95, 0x03, 0x60,
            0x72, 0x62, 0x9e, 0x0c, 0xdf, 0xcb, 0x92, 0x35, 0x97, 0xbc, 0x54, 0x5b, 0x8a, 0x15,
            0x08, 0x61, 0x1b, 0x56, 0x6a, 0x13, 0x71, 0x8a, 0xb9, 0x2b, 0x66, 0x4c, 0x99, 0xe0,
            0x9c, 0x9b, 0x3a, 0xd8, 0x27, 0x67, 0x93, 0x63, 0x0e, 0x8d, 0x2e, 0xf0, 0x76, 0x3a,
            0x39, 0x3d, 0x11, 0x81, 0xcf, 0x3b, 0xff, 0x77, 0x85, 0x27, 0x95, 0xfc, 0xcb, 0xa6,
        ];
        check_partial_decoding(&input);
    }

    #[test]
    pub fn test_create_non_fungible_resource_with_initial_supply() {
        let input: [u8; 493] = [
            0x5c, 0x21, 0x02, 0x21, 0x02, 0x21, 0x02, 0x21, 0x09, 0x07, 0x01, 0x07, 0x01, 0x0a,
            0xe1, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x46, 0x05, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x0a, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00,
            0x01, 0xb1, 0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62,
            0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59,
            0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x01, 0x01, 0x09, 0x40, 0x42, 0x0f, 0x00,
            0x08, 0x05, 0x00, 0x21, 0x02, 0x20, 0x22, 0x03, 0x25, 0x03, 0x81, 0x03, 0xa1, 0x66,
            0xd4, 0x14, 0x93, 0x48, 0xe4, 0xbb, 0x49, 0xf4, 0xbe, 0xed, 0xe0, 0x81, 0x51, 0x8c,
            0x0a, 0x9f, 0x9c, 0x70, 0xf9, 0x87, 0xbe, 0x26, 0x55, 0xb1, 0x0c, 0x08, 0x6c, 0x6f,
            0x63, 0x6b, 0x5f, 0x66, 0x65, 0x65, 0x20, 0x07, 0x24, 0x5c, 0x21, 0x01, 0xb5, 0x00,
            0x00, 0xe8, 0x89, 0x04, 0x23, 0xc7, 0x8a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x20, 0x04, 0x22, 0x01, 0x00, 0x23, 0x0c, 0x0c, 0x02, 0x0b, 0x64,
            0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x41, 0x20, 0x76,
            0x65, 0x72, 0x79, 0x20, 0x69, 0x6e, 0x6e, 0x6f, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65,
            0x20, 0x61, 0x6e, 0x64, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74,
            0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x04, 0x6e, 0x61, 0x6d, 0x65,
            0x0a, 0x4d, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x23, 0x22, 0x21,
            0x02, 0x04, 0x00, 0x02, 0x22, 0x00, 0x00, 0x22, 0x01, 0x00, 0x05, 0x00, 0x02, 0x22,
            0x00, 0x00, 0x22, 0x01, 0x00, 0x22, 0x01, 0x01, 0x23, 0xb7, 0x21, 0x01, 0x01, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x02, 0x20, 0x07, 0x31, 0x5c, 0x21, 0x02,
            0x0c, 0x0b, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0xb5,
            0x00, 0x00, 0xb0, 0xd8, 0x6b, 0x90, 0x88, 0xa6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x20, 0x07, 0x16, 0x5c, 0x21, 0x02, 0x07, 0x0c, 0x0b, 0x13,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x25, 0x03, 0x81, 0x03, 0xa1, 0x66, 0xd4, 0x14, 0x93, 0x48, 0xe4, 0xbb, 0x49,
            0xf4, 0xbe, 0xed, 0xe0, 0x81, 0x51, 0x8c, 0x0a, 0x9f, 0x9c, 0x70, 0xf9, 0x87, 0xbe,
            0x26, 0x55, 0xb1, 0x0c, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x62,
            0x61, 0x74, 0x63, 0x68, 0x20, 0x07, 0x05, 0x5c, 0x21, 0x01, 0xa2, 0x00, 0x20, 0x20,
            0x00, 0x20, 0x22, 0x00, 0x22, 0x00, 0x01, 0xb2, 0x00, 0x7c, 0x5b, 0xee, 0xf1, 0x68,
            0x77, 0x73, 0x98, 0x54, 0xa7, 0x29, 0xd3, 0x1d, 0x76, 0x1c, 0x14, 0xbd, 0x29, 0xdd,
            0x80, 0xcb, 0x9c, 0x0f, 0xec, 0x0f, 0xec, 0x9a, 0x52, 0xcc, 0x36, 0x6c, 0x94, 0x30,
            0xa1, 0xc5, 0x89, 0xef, 0xd6, 0x38, 0xbf, 0x38, 0x37, 0x29, 0xb4, 0x74, 0x75, 0xf1,
            0x47, 0x9e, 0xb4, 0xce, 0x9c, 0xa4, 0x41, 0x20, 0x10, 0x60, 0x49, 0x03, 0x76, 0x63,
            0xb8, 0x25, 0xb6,
        ];
        check_partial_decoding(&input);
    }

    #[test]
    pub fn test_create_non_fungible_resource_with_initial_supply_with_owner() {
        let input: [u8; 511] = [
            0x5c, 0x21, 0x02, 0x21, 0x02, 0x21, 0x02, 0x21, 0x09, 0x07, 0x01, 0x07, 0x01, 0x0a,
            0xe1, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x46, 0x05, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x0a, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00,
            0x01, 0xb1, 0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62,
            0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59,
            0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x01, 0x01, 0x09, 0x40, 0x42, 0x0f, 0x00,
            0x08, 0x05, 0x00, 0x21, 0x02, 0x20, 0x22, 0x03, 0x25, 0x03, 0x81, 0x03, 0xa1, 0x66,
            0xd4, 0x14, 0x93, 0x48, 0xe4, 0xbb, 0x49, 0xf4, 0xbe, 0xed, 0xe0, 0x81, 0x51, 0x8c,
            0x0a, 0x9f, 0x9c, 0x70, 0xf9, 0x87, 0xbe, 0x26, 0x55, 0xb1, 0x0c, 0x08, 0x6c, 0x6f,
            0x63, 0x6b, 0x5f, 0x66, 0x65, 0x65, 0x20, 0x07, 0x24, 0x5c, 0x21, 0x01, 0xb5, 0x00,
            0x00, 0xe8, 0x89, 0x04, 0x23, 0xc7, 0x8a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x21, 0x04, 0x22, 0x01, 0x00, 0x23, 0x0c, 0x0c, 0x02, 0x0b, 0x64,
            0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x41, 0x20, 0x76,
            0x65, 0x72, 0x79, 0x20, 0x69, 0x6e, 0x6e, 0x6f, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65,
            0x20, 0x61, 0x6e, 0x64, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74,
            0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x04, 0x6e, 0x61, 0x6d, 0x65,
            0x0a, 0x4d, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x21, 0x02, 0x82,
            0x00, 0x10, 0xc0, 0x88, 0xe0, 0xf1, 0x03, 0x9e, 0x64, 0x18, 0x65, 0x40, 0xbb, 0xc1,
            0x9e, 0xc8, 0x96, 0x7b, 0x97, 0x71, 0x6e, 0x43, 0xb0, 0x01, 0xde, 0x0e, 0x2b, 0xb7,
            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x22, 0x01, 0x01, 0x23, 0xb7,
            0x21, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x02, 0x20, 0x07,
            0x31, 0x5c, 0x21, 0x02, 0x0c, 0x0b, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x57, 0x6f,
            0x72, 0x6c, 0x64, 0xb5, 0x00, 0x00, 0xb0, 0xd8, 0x6b, 0x90, 0x88, 0xa6, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x07, 0x16, 0x5c, 0x21, 0x02,
            0x07, 0x0c, 0x0b, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x03, 0x81, 0x03, 0xa1, 0x66, 0xd4, 0x14, 0x93,
            0x48, 0xe4, 0xbb, 0x49, 0xf4, 0xbe, 0xed, 0xe0, 0x81, 0x51, 0x8c, 0x0a, 0x9f, 0x9c,
            0x70, 0xf9, 0x87, 0xbe, 0x26, 0x55, 0xb1, 0x0c, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73,
            0x69, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x20, 0x07, 0x05, 0x5c, 0x21, 0x01,
            0xa2, 0x00, 0x20, 0x20, 0x00, 0x20, 0x22, 0x00, 0x22, 0x00, 0x01, 0xb2, 0x01, 0x17,
            0x82, 0xd8, 0x5f, 0x55, 0xcb, 0x94, 0x68, 0x23, 0x1b, 0x53, 0x78, 0x54, 0x69, 0x94,
            0xb7, 0xbe, 0x5c, 0x74, 0xbd, 0xfb, 0x0f, 0xe4, 0x7f, 0x34, 0xcb, 0x1e, 0xb7, 0x2a,
            0x66, 0x50, 0x44, 0x27, 0xf7, 0x6f, 0x69, 0x01, 0x7b, 0x6c, 0x81, 0x2a, 0xf9, 0x5b,
            0x5e, 0xb4, 0x96, 0x18, 0xf2, 0xe7, 0x9f, 0xe8, 0xd9, 0xf8, 0x05, 0xbe, 0x75, 0x4e,
            0x4b, 0x18, 0xc2, 0xc5, 0xe1, 0x62, 0xce,
        ];
        check_partial_decoding(&input);
    }

    #[test]
    pub fn test_create_non_fungible_resource_with_no_initial_supply() {
        let input: [u8; 349] = [
            0x5c, 0x21, 0x02, 0x21, 0x02, 0x21, 0x02, 0x21, 0x09, 0x07, 0x01, 0x07, 0x01, 0x0a,
            0xe1, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x46, 0x05, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x0a, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00,
            0x01, 0xb1, 0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62,
            0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59,
            0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x01, 0x01, 0x09, 0x40, 0x42, 0x0f, 0x00,
            0x08, 0x05, 0x00, 0x21, 0x02, 0x20, 0x22, 0x02, 0x25, 0x03, 0x81, 0x03, 0xa1, 0x66,
            0xd4, 0x14, 0x93, 0x48, 0xe4, 0xbb, 0x49, 0xf4, 0xbe, 0xed, 0xe0, 0x81, 0x51, 0x8c,
            0x0a, 0x9f, 0x9c, 0x70, 0xf9, 0x87, 0xbe, 0x26, 0x55, 0xb1, 0x0c, 0x08, 0x6c, 0x6f,
            0x63, 0x6b, 0x5f, 0x66, 0x65, 0x65, 0x20, 0x07, 0x24, 0x5c, 0x21, 0x01, 0xb5, 0x00,
            0x00, 0xe8, 0x89, 0x04, 0x23, 0xc7, 0x8a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x20, 0x04, 0x22, 0x01, 0x00, 0x23, 0x0c, 0x0c, 0x02, 0x0b, 0x64,
            0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x41, 0x20, 0x76,
            0x65, 0x72, 0x79, 0x20, 0x69, 0x6e, 0x6e, 0x6f, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65,
            0x20, 0x61, 0x6e, 0x64, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74,
            0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x04, 0x6e, 0x61, 0x6d, 0x65,
            0x0a, 0x4d, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x23, 0x22, 0x21,
            0x02, 0x04, 0x00, 0x02, 0x22, 0x00, 0x00, 0x22, 0x01, 0x00, 0x05, 0x00, 0x02, 0x22,
            0x00, 0x00, 0x22, 0x01, 0x00, 0x22, 0x00, 0x00, 0x20, 0x20, 0x00, 0x20, 0x22, 0x00,
            0x22, 0x00, 0x01, 0xb2, 0x01, 0x47, 0x43, 0x04, 0x0f, 0xdf, 0x55, 0xa8, 0x79, 0x66,
            0x26, 0xd7, 0x53, 0xb5, 0x5f, 0x0d, 0x2a, 0x83, 0x11, 0xd1, 0xb7, 0xb1, 0x95, 0xe6,
            0x3d, 0x61, 0x5b, 0x8a, 0x63, 0x93, 0xea, 0x3e, 0x05, 0x3a, 0x07, 0x2d, 0x9e, 0x7b,
            0xb9, 0xc3, 0x07, 0x22, 0xad, 0xff, 0x72, 0x97, 0x9d, 0x8a, 0x64, 0x35, 0xef, 0x97,
            0x32, 0x0a, 0x0c, 0x26, 0xcc, 0x49, 0xa1, 0xf5, 0xb0, 0x3e, 0x17, 0xef, 0x52,
        ];
        check_partial_decoding(&input);
    }

    #[test]
    pub fn test_create_non_fungible_resource_with_no_initial_supply_with_owner() {
        let input: [u8; 367] = [
            0x5c, 0x21, 0x02, 0x21, 0x02, 0x21, 0x02, 0x21, 0x09, 0x07, 0x01, 0x07, 0x01, 0x0a,
            0xe1, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x46, 0x05, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x0a, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00,
            0x01, 0xb1, 0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62,
            0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59,
            0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x01, 0x01, 0x09, 0x40, 0x42, 0x0f, 0x00,
            0x08, 0x05, 0x00, 0x21, 0x02, 0x20, 0x22, 0x02, 0x25, 0x03, 0x81, 0x03, 0xa1, 0x66,
            0xd4, 0x14, 0x93, 0x48, 0xe4, 0xbb, 0x49, 0xf4, 0xbe, 0xed, 0xe0, 0x81, 0x51, 0x8c,
            0x0a, 0x9f, 0x9c, 0x70, 0xf9, 0x87, 0xbe, 0x26, 0x55, 0xb1, 0x0c, 0x08, 0x6c, 0x6f,
            0x63, 0x6b, 0x5f, 0x66, 0x65, 0x65, 0x20, 0x07, 0x24, 0x5c, 0x21, 0x01, 0xb5, 0x00,
            0x00, 0xe8, 0x89, 0x04, 0x23, 0xc7, 0x8a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x21, 0x04, 0x22, 0x01, 0x00, 0x23, 0x0c, 0x0c, 0x02, 0x0b, 0x64,
            0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x41, 0x20, 0x76,
            0x65, 0x72, 0x79, 0x20, 0x69, 0x6e, 0x6e, 0x6f, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65,
            0x20, 0x61, 0x6e, 0x64, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74,
            0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x04, 0x6e, 0x61, 0x6d, 0x65,
            0x0a, 0x4d, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x21, 0x02, 0x82,
            0x00, 0x10, 0xc0, 0x88, 0xe0, 0xf1, 0x03, 0x9e, 0x64, 0x18, 0x65, 0x40, 0xbb, 0xc1,
            0x9e, 0xc8, 0x96, 0x7b, 0x97, 0x71, 0x6e, 0x43, 0xb0, 0x01, 0xde, 0x0e, 0x2b, 0xb7,
            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x22, 0x00, 0x00, 0x20, 0x20,
            0x00, 0x20, 0x22, 0x00, 0x22, 0x00, 0x01, 0xb2, 0x00, 0xbd, 0x06, 0xfb, 0x6a, 0x7c,
            0x21, 0x43, 0x89, 0x96, 0x34, 0x66, 0xd8, 0x33, 0x17, 0x43, 0x52, 0xa0, 0x54, 0x2e,
            0x34, 0x43, 0x18, 0x8b, 0xb7, 0x9d, 0xc7, 0x7d, 0x5c, 0xd9, 0x8c, 0xfe, 0xa0, 0x7a,
            0x36, 0xe5, 0x3c, 0xe2, 0xe1, 0x3c, 0xd5, 0x12, 0x02, 0x4e, 0xa6, 0x94, 0xed, 0xe5,
            0x4c, 0xa7, 0xd6, 0x4e, 0x32, 0xf1, 0xf6, 0x4c, 0x6a, 0x85, 0x1d, 0x93, 0x29, 0xfc,
            0xe9, 0x1c, 0xab,
        ];
        check_partial_decoding(&input);
    }

    #[test]
    pub fn test_invocation() {
        let input: [u8; 383] = [
            0x5c, 0x21, 0x02, 0x21, 0x02, 0x21, 0x02, 0x21, 0x09, 0x07, 0x01, 0x07, 0x01, 0x0a,
            0xe1, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x46, 0x05, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x0a, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00,
            0x01, 0xb1, 0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62,
            0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59,
            0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x01, 0x01, 0x09, 0x40, 0x42, 0x0f, 0x00,
            0x08, 0x05, 0x00, 0x21, 0x02, 0x20, 0x22, 0x02, 0x24, 0x04, 0x80, 0x01, 0x2b, 0x71,
            0x84, 0xfd, 0x2f, 0x42, 0x6f, 0xb4, 0x34, 0xc7, 0x44, 0xc3, 0x21, 0xcd, 0x91, 0xdf,
            0x83, 0x75, 0xb5, 0xe1, 0xf0, 0x1b, 0x74, 0x00, 0x9d, 0xff, 0x0c, 0x0d, 0x42, 0x6c,
            0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x0c, 0x01, 0x66,
            0x20, 0x07, 0x0b, 0x5c, 0x21, 0x01, 0x0c, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
            0x25, 0x03, 0x81, 0x02, 0x92, 0x56, 0x6c, 0x83, 0xde, 0x7f, 0xd6, 0xb0, 0x4f, 0xcc,
            0x92, 0xb5, 0xe0, 0x4b, 0x03, 0x22, 0x8c, 0xcf, 0xf0, 0x40, 0x78, 0x56, 0x73, 0x27,
            0x8e, 0xf1, 0x0c, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
            0x64, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x07, 0x65, 0x5c, 0x21, 0x02,
            0xb5, 0x00, 0x00, 0x64, 0xa7, 0xb3, 0xb6, 0xe0, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0xb6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x02, 0x3e, 0xd4, 0x7e, 0xc9, 0xda, 0x71, 0xdc, 0xda, 0x2f, 0x4f, 0xb5, 0xe9, 0xf3,
            0x7f, 0xd2, 0x07, 0x9e, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x20, 0x20, 0x00, 0x20, 0x22, 0x00, 0x22, 0x00, 0x01, 0xb2, 0x01, 0xb1, 0xb5, 0x54,
            0x57, 0x4e, 0xe1, 0x5d, 0x1f, 0xe0, 0x2a, 0xf7, 0xda, 0x33, 0xb6, 0x91, 0x41, 0x75,
            0xc4, 0x69, 0x1b, 0x17, 0x79, 0xd5, 0xd8, 0x1d, 0x16, 0x72, 0x08, 0x94, 0x66, 0x34,
            0x97, 0x3a, 0x56, 0xab, 0xa1, 0x7c, 0x03, 0xc7, 0x8e, 0xbc, 0x19, 0xdb, 0x21, 0xbb,
            0x8d, 0x50, 0xd8, 0x92, 0x39, 0x70, 0xb8, 0x2b, 0x53, 0x99, 0xda, 0xe8, 0x36, 0x60,
            0x96, 0xd3, 0x59, 0x5d, 0xe8,
        ];
        check_partial_decoding(&input);
    }

    #[test]
    pub fn test_metadata() {
        let input: [u8; 284] = [
            0x5c, 0x21, 0x02, 0x21, 0x02, 0x21, 0x02, 0x21, 0x09, 0x07, 0x01, 0x07, 0x01, 0x0a,
            0xe1, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x46, 0x05, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x0a, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00,
            0x01, 0xb1, 0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62,
            0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59,
            0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x01, 0x01, 0x09, 0x40, 0x42, 0x0f, 0x00,
            0x08, 0x05, 0x00, 0x21, 0x02, 0x20, 0x22, 0x03, 0x15, 0x03, 0x22, 0x01, 0x01, 0x80,
            0x01, 0x2b, 0x71, 0x84, 0xfd, 0x2f, 0x42, 0x6f, 0xb4, 0x34, 0xc7, 0x44, 0xc3, 0x21,
            0xcd, 0x91, 0xdf, 0x83, 0x75, 0xb5, 0xe1, 0xf0, 0x1b, 0x74, 0x00, 0x9d, 0xff, 0x0c,
            0x01, 0x6b, 0x0c, 0x01, 0x76, 0x15, 0x03, 0x22, 0x00, 0x01, 0x81, 0x02, 0x15, 0x27,
            0x0b, 0xf1, 0xb9, 0xa7, 0x60, 0x13, 0x27, 0x5a, 0x65, 0x46, 0x44, 0x2a, 0x70, 0x7d,
            0x86, 0x14, 0xcd, 0xc4, 0x99, 0x59, 0xff, 0x51, 0x1e, 0x53, 0x0c, 0x01, 0x6b, 0x0c,
            0x01, 0x76, 0x15, 0x03, 0x22, 0x02, 0x01, 0x82, 0x00, 0x0f, 0x8e, 0x92, 0x0a, 0xa7,
            0x9f, 0x53, 0x34, 0x9d, 0x0a, 0x99, 0x74, 0x6e, 0x17, 0xb5, 0x92, 0x41, 0xbd, 0x51,
            0xe1, 0x9a, 0xbb, 0x50, 0xad, 0x6b, 0x6a, 0x0c, 0x01, 0x6b, 0x0c, 0x01, 0x76, 0x20,
            0x20, 0x00, 0x20, 0x22, 0x00, 0x22, 0x00, 0x01, 0xb2, 0x00, 0x82, 0x5d, 0x02, 0x15,
            0x1d, 0x16, 0x66, 0x1c, 0xe4, 0x7c, 0x2c, 0x94, 0x20, 0xf1, 0x8c, 0x62, 0x42, 0x42,
            0xb7, 0x92, 0x75, 0x24, 0x9f, 0x1f, 0x97, 0x1c, 0x15, 0x52, 0x6f, 0x85, 0x39, 0x96,
            0x00, 0xb2, 0x57, 0x3b, 0x45, 0x93, 0x4e, 0x1e, 0xed, 0x08, 0x99, 0xdf, 0x04, 0xaa,
            0xf8, 0x31, 0xd9, 0xa4, 0xd7, 0x6f, 0x38, 0xa8, 0x4e, 0x22, 0x75, 0xc8, 0x54, 0x4f,
            0x5e, 0x87, 0xe9, 0x01,
        ];
        check_partial_decoding(&input);
    }

    #[test]
    pub fn test_mint_fungible() {
        let input: [u8; 483] = [
            0x5c, 0x21, 0x02, 0x21, 0x02, 0x21, 0x02, 0x21, 0x09, 0x07, 0x01, 0x07, 0x01, 0x0a,
            0xe1, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x46, 0x05, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x0a, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00,
            0x01, 0xb1, 0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62,
            0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59,
            0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x01, 0x01, 0x09, 0x40, 0x42, 0x0f, 0x00,
            0x08, 0x05, 0x00, 0x21, 0x02, 0x20, 0x22, 0x04, 0x25, 0x03, 0x81, 0x03, 0xa1, 0x66,
            0xd4, 0x14, 0x93, 0x48, 0xe4, 0xbb, 0x49, 0xf4, 0xbe, 0xed, 0xe0, 0x81, 0x51, 0x8c,
            0x0a, 0x9f, 0x9c, 0x70, 0xf9, 0x87, 0xbe, 0x26, 0x55, 0xb1, 0x0c, 0x08, 0x6c, 0x6f,
            0x63, 0x6b, 0x5f, 0x66, 0x65, 0x65, 0x20, 0x07, 0x24, 0x5c, 0x21, 0x01, 0xb5, 0x00,
            0x00, 0xe8, 0x89, 0x04, 0x23, 0xc7, 0x8a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x25, 0x03, 0x81, 0x03, 0xa1, 0x66, 0xd4, 0x14, 0x93, 0x48, 0xe4,
            0xbb, 0x49, 0xf4, 0xbe, 0xed, 0xe0, 0x81, 0x51, 0x8c, 0x0a, 0x9f, 0x9c, 0x70, 0xf9,
            0x87, 0xbe, 0x26, 0x55, 0xb1, 0x0c, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
            0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
            0x74, 0x20, 0x07, 0x40, 0x5c, 0x21, 0x02, 0xb5, 0x00, 0x00, 0x64, 0xa7, 0xb3, 0xb6,
            0xe0, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0x00,
            0x5f, 0xea, 0x03, 0x73, 0xd4, 0x4e, 0x50, 0xd8, 0x11, 0x78, 0x42, 0x21, 0x43, 0x9d,
            0x6b, 0x69, 0x41, 0x91, 0xf5, 0xdc, 0x8d, 0xa2, 0xb0, 0xfa, 0x1d, 0x5c, 0x1b, 0x02,
            0x82, 0x00, 0x10, 0xc0, 0x88, 0xe0, 0xf1, 0x03, 0x9e, 0x64, 0x18, 0x65, 0x40, 0xbb,
            0xc1, 0x9e, 0xc8, 0x96, 0x7b, 0x97, 0x71, 0x6e, 0x43, 0xb0, 0x01, 0xde, 0x0e, 0x2b,
            0xb5, 0x00, 0x00, 0xb0, 0xd8, 0x6b, 0x90, 0x88, 0xa6, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x03, 0x81, 0x03, 0xa1, 0x66, 0xd4, 0x14, 0x93,
            0x48, 0xe4, 0xbb, 0x49, 0xf4, 0xbe, 0xed, 0xe0, 0x81, 0x51, 0x8c, 0x0a, 0x9f, 0x9c,
            0x70, 0xf9, 0x87, 0xbe, 0x26, 0x55, 0xb1, 0x0c, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73,
            0x69, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x20, 0x07, 0x05, 0x5c, 0x21, 0x01,
            0xa2, 0x00, 0x20, 0x20, 0x00, 0x20, 0x22, 0x00, 0x22, 0x00, 0x01, 0xb2, 0x00, 0x19,
            0x1c, 0xd2, 0xde, 0x5c, 0x93, 0x01, 0x37, 0xc5, 0x18, 0xaf, 0xb3, 0x8e, 0x0b, 0x59,
            0xf7, 0xcb, 0xe9, 0x1a, 0x3a, 0xaf, 0x8a, 0x04, 0x12, 0x47, 0xaa, 0x35, 0xc4, 0xd0,
            0xec, 0x6d, 0x14, 0x38, 0x52, 0x3f, 0x9f, 0x6e, 0xa8, 0x15, 0xc1, 0x1b, 0xec, 0x80,
            0xd9, 0xe1, 0xb5, 0x26, 0xa5, 0xb1, 0x8b, 0x8c, 0x3f, 0x20, 0xb2, 0x3b, 0xf5, 0xe4,
            0x3d, 0x26, 0xed, 0x32, 0x5b, 0x10, 0x70,
        ];
        check_partial_decoding(&input);
    }

    #[test]
    pub fn test_mint_non_fungible() {
        let input: [u8; 541] = [
            0x5c, 0x21, 0x02, 0x21, 0x02, 0x21, 0x02, 0x21, 0x09, 0x07, 0x01, 0x07, 0x01, 0x0a,
            0xe1, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x46, 0x05, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x0a, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00,
            0x01, 0xb1, 0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62,
            0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59,
            0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x01, 0x01, 0x09, 0x40, 0x42, 0x0f, 0x00,
            0x08, 0x05, 0x00, 0x21, 0x02, 0x20, 0x22, 0x04, 0x25, 0x03, 0x81, 0x03, 0xa1, 0x66,
            0xd4, 0x14, 0x93, 0x48, 0xe4, 0xbb, 0x49, 0xf4, 0xbe, 0xed, 0xe0, 0x81, 0x51, 0x8c,
            0x0a, 0x9f, 0x9c, 0x70, 0xf9, 0x87, 0xbe, 0x26, 0x55, 0xb1, 0x0c, 0x08, 0x6c, 0x6f,
            0x63, 0x6b, 0x5f, 0x66, 0x65, 0x65, 0x20, 0x07, 0x24, 0x5c, 0x21, 0x01, 0xb5, 0x00,
            0x00, 0xe8, 0x89, 0x04, 0x23, 0xc7, 0x8a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x25, 0x03, 0x81, 0x03, 0xa1, 0x66, 0xd4, 0x14, 0x93, 0x48, 0xe4,
            0xbb, 0x49, 0xf4, 0xbe, 0xed, 0xe0, 0x81, 0x51, 0x8c, 0x0a, 0x9f, 0x9c, 0x70, 0xf9,
            0x87, 0xbe, 0x26, 0x55, 0xb1, 0x0c, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
            0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
            0x74, 0x20, 0x07, 0x40, 0x5c, 0x21, 0x02, 0xb5, 0x00, 0x00, 0x64, 0xa7, 0xb3, 0xb6,
            0xe0, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0x00,
            0x5f, 0xea, 0x03, 0x73, 0xd4, 0x4e, 0x50, 0xd8, 0x11, 0x78, 0x42, 0x21, 0x43, 0x9d,
            0x6b, 0x69, 0x41, 0x91, 0xf5, 0xdc, 0x8d, 0xa2, 0xb0, 0xfa, 0x1d, 0x5c, 0x1c, 0x02,
            0x82, 0x00, 0x10, 0xc0, 0x88, 0xe0, 0xf1, 0x03, 0x9e, 0x64, 0x18, 0x65, 0x40, 0xbb,
            0xc1, 0x9e, 0xc8, 0x96, 0x7b, 0x97, 0x71, 0x6e, 0x43, 0xb0, 0x01, 0xde, 0x0e, 0x2b,
            0x23, 0xb7, 0x21, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x02,
            0x20, 0x07, 0x31, 0x5c, 0x21, 0x02, 0x0c, 0x0b, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20,
            0x57, 0x6f, 0x72, 0x6c, 0x64, 0xb5, 0x00, 0x00, 0xb0, 0xd8, 0x6b, 0x90, 0x88, 0xa6,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x07, 0x16, 0x5c,
            0x21, 0x02, 0x07, 0x0c, 0x0b, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x03, 0x81, 0x03, 0xa1, 0x66, 0xd4,
            0x14, 0x93, 0x48, 0xe4, 0xbb, 0x49, 0xf4, 0xbe, 0xed, 0xe0, 0x81, 0x51, 0x8c, 0x0a,
            0x9f, 0x9c, 0x70, 0xf9, 0x87, 0xbe, 0x26, 0x55, 0xb1, 0x0c, 0x0d, 0x64, 0x65, 0x70,
            0x6f, 0x73, 0x69, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x20, 0x07, 0x05, 0x5c,
            0x21, 0x01, 0xa2, 0x00, 0x20, 0x20, 0x00, 0x20, 0x22, 0x00, 0x22, 0x00, 0x01, 0xb2,
            0x00, 0xa7, 0x2b, 0x31, 0x47, 0xaf, 0xdb, 0xda, 0xe7, 0x6b, 0xe4, 0x30, 0x4b, 0x7a,
            0xb6, 0xe7, 0x09, 0xeb, 0x22, 0x7d, 0xe1, 0xce, 0x08, 0xad, 0xd0, 0x0d, 0x65, 0x2c,
            0x67, 0x1d, 0x8b, 0xde, 0xc6, 0x75, 0x30, 0x1a, 0x5b, 0x9b, 0xbe, 0xcc, 0xe9, 0xd6,
            0x9e, 0xd5, 0x5e, 0x71, 0x68, 0x2e, 0x00, 0x1c, 0x2d, 0xc1, 0xc8, 0xf3, 0xa5, 0x3c,
            0x1e, 0x69, 0x50, 0xfa, 0x99, 0x15, 0x29, 0x93, 0xec,
        ];
        check_partial_decoding(&input);
    }

    #[test]
    pub fn test_publish_package() {
        let input: [u8; 1003] = [
            0x5c, 0x21, 0x02, 0x21, 0x02, 0x21, 0x02, 0x21, 0x09, 0x07, 0x01, 0x07, 0x01, 0x0a,
            0xe1, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x46, 0x05, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x0a, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00,
            0x01, 0xb1, 0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62,
            0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59,
            0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x01, 0x01, 0x09, 0x40, 0x42, 0x0f, 0x00,
            0x08, 0x05, 0x00, 0x21, 0x02, 0x20, 0x22, 0x02, 0x25, 0x03, 0x81, 0x03, 0xa1, 0x66,
            0xd4, 0x14, 0x93, 0x48, 0xe4, 0xbb, 0x49, 0xf4, 0xbe, 0xed, 0xe0, 0x81, 0x51, 0x8c,
            0x0a, 0x9f, 0x9c, 0x70, 0xf9, 0x87, 0xbe, 0x26, 0x55, 0xb1, 0x0c, 0x08, 0x6c, 0x6f,
            0x63, 0x6b, 0x5f, 0x66, 0x65, 0x65, 0x20, 0x07, 0x24, 0x5c, 0x21, 0x01, 0xb5, 0x00,
            0x00, 0xe8, 0x89, 0x04, 0x23, 0xc7, 0x8a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x11, 0x05, 0xa3, 0x36, 0xda, 0xe5, 0x40, 0xb7, 0x88, 0x99, 0x56,
            0xf1, 0xf1, 0xd8, 0xd4, 0x6b, 0xa2, 0x3e, 0x5e, 0x44, 0xbf, 0x57, 0x23, 0xae, 0xf2,
            0xa8, 0xe6, 0xb6, 0x98, 0x68, 0x6c, 0x02, 0x58, 0x36, 0x18, 0xa3, 0x15, 0xe8, 0x69,
            0x9a, 0x6d, 0x63, 0xa9, 0x6f, 0x66, 0xf6, 0xfe, 0xeb, 0x60, 0x95, 0x49, 0xbe, 0x26,
            0x88, 0xb9, 0x6b, 0x02, 0x11, 0x9f, 0x26, 0x0a, 0xe6, 0xdf, 0xd0, 0x12, 0xd1, 0x6a,
            0x5d, 0x23, 0x0c, 0x21, 0x00, 0x23, 0x0c, 0x0c, 0x00, 0x21, 0x06, 0x23, 0x22, 0x22,
            0x04, 0x01, 0x01, 0x22, 0x02, 0x01, 0x22, 0x01, 0x00, 0x00, 0x01, 0x22, 0x02, 0x01,
            0x22, 0x00, 0x01, 0x22, 0x00, 0x01, 0x22, 0x00, 0x01, 0x21, 0x02, 0x82, 0x00, 0x53,
            0xf1, 0xc3, 0xe2, 0x0c, 0xc2, 0x38, 0x35, 0x5e, 0x23, 0xb0, 0x1d, 0xec, 0xbb, 0x00,
            0xa7, 0x88, 0x5c, 0x2a, 0x82, 0x64, 0x8d, 0x5e, 0x85, 0x9d, 0x4f, 0xb7, 0x01, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x22, 0x02, 0x01, 0x22, 0x02,
            0x00, 0x00, 0x01, 0x22, 0x02, 0x01, 0x22, 0x00, 0x01, 0x22, 0x00, 0x01, 0x22, 0x00,
            0x01, 0x21, 0x02, 0x82, 0x00, 0x53, 0xf1, 0xc3, 0xe2, 0x0c, 0xc2, 0x38, 0x35, 0x5e,
            0x23, 0xb0, 0x1d, 0xec, 0xbb, 0x00, 0xa7, 0x88, 0x5c, 0x2a, 0x82, 0x64, 0x8d, 0x5e,
            0x85, 0x9d, 0x4f, 0xb7, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01,
            0x01, 0x22, 0x03, 0x01, 0x22, 0x00, 0x00, 0x00, 0x01, 0x22, 0x02, 0x01, 0x22, 0x00,
            0x01, 0x22, 0x00, 0x01, 0x22, 0x00, 0x01, 0x21, 0x02, 0x82, 0x00, 0x53, 0xf1, 0xc3,
            0xe2, 0x0c, 0xc2, 0x38, 0x35, 0x5e, 0x23, 0xb0, 0x1d, 0xec, 0xbb, 0x00, 0xa7, 0x88,
            0x5c, 0x2a, 0x82, 0x64, 0x8d, 0x5e, 0x85, 0x9d, 0x4f, 0xb7, 0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x22, 0x03, 0x01, 0x22, 0x01, 0x00, 0x00,
            0x01, 0x22, 0x00, 0x00, 0x23, 0x0c, 0x22, 0x00, 0x22, 0x01, 0x00, 0x23, 0x22, 0x22,
            0x04, 0x01, 0x01, 0x22, 0x02, 0x01, 0x22, 0x01, 0x00, 0x02, 0x01, 0x22, 0x00, 0x01,
            0x22, 0x00, 0x01, 0x22, 0x00, 0x01, 0x21, 0x02, 0x82, 0x00, 0x53, 0xf1, 0xc3, 0xe2,
            0x0c, 0xc2, 0x38, 0x35, 0x5e, 0x23, 0xb0, 0x1d, 0xec, 0xbb, 0x00, 0xa7, 0x88, 0x5c,
            0x2a, 0x82, 0x64, 0x8d, 0x5e, 0x85, 0x9d, 0x4f, 0xb7, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x22, 0x02, 0x01, 0x22, 0x02, 0x00, 0x02, 0x01,
            0x22, 0x00, 0x01, 0x22, 0x00, 0x01, 0x22, 0x00, 0x01, 0x21, 0x02, 0x82, 0x00, 0x53,
            0xf1, 0xc3, 0xe2, 0x0c, 0xc2, 0x38, 0x35, 0x5e, 0x23, 0xb0, 0x1d, 0xec, 0xbb, 0x00,
            0xa7, 0x88, 0x5c, 0x2a, 0x82, 0x64, 0x8d, 0x5e, 0x85, 0x9d, 0x4f, 0xb7, 0x01, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x22, 0x03, 0x01, 0x22, 0x00,
            0x00, 0x02, 0x01, 0x22, 0x00, 0x01, 0x22, 0x00, 0x01, 0x22, 0x00, 0x01, 0x21, 0x02,
            0x82, 0x00, 0x53, 0xf1, 0xc3, 0xe2, 0x0c, 0xc2, 0x38, 0x35, 0x5e, 0x23, 0xb0, 0x1d,
            0xec, 0xbb, 0x00, 0xa7, 0x88, 0x5c, 0x2a, 0x82, 0x64, 0x8d, 0x5e, 0x85, 0x9d, 0x4f,
            0xb7, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x22, 0x03,
            0x01, 0x22, 0x01, 0x00, 0x02, 0x01, 0x22, 0x00, 0x01, 0x22, 0x00, 0x01, 0x22, 0x00,
            0x01, 0x21, 0x02, 0x82, 0x00, 0x53, 0xf1, 0xc3, 0xe2, 0x0c, 0xc2, 0x38, 0x35, 0x5e,
            0x23, 0xb0, 0x1d, 0xec, 0xbb, 0x00, 0xa7, 0x88, 0x5c, 0x2a, 0x82, 0x64, 0x8d, 0x5e,
            0x85, 0x9d, 0x4f, 0xb7, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x23,
            0x0c, 0x22, 0x00, 0x22, 0x01, 0x00, 0x20, 0x20, 0x02, 0x07, 0x07, 0x32, 0x0c, 0x10,
            0x00, 0x00, 0x00, 0x00, 0x07, 0xd2, 0x01, 0x10, 0x02, 0x00, 0x00, 0x00, 0x30, 0x07,
            0xc0, 0x00, 0x00, 0x00, 0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x04, 0x05,
            0x01, 0x70, 0x01, 0x01, 0x01, 0x05, 0x03, 0x01, 0x00, 0x10, 0x06, 0x19, 0x03, 0x7f,
            0x01, 0x41, 0x80, 0x80, 0xc0, 0x00, 0x0b, 0x7f, 0x00, 0x41, 0x80, 0x80, 0xc0, 0x00,
            0x0b, 0x7f, 0x00, 0x41, 0x80, 0x80, 0xc0, 0x00, 0x0b, 0x07, 0x25, 0x03, 0x06, 0x6d,
            0x65, 0x6d, 0x6f, 0x72, 0x79, 0x02, 0x00, 0x0a, 0x5f, 0x5f, 0x64, 0x61, 0x74, 0x61,
            0x5f, 0x65, 0x6e, 0x64, 0x03, 0x01, 0x0b, 0x5f, 0x5f, 0x68, 0x65, 0x61, 0x70, 0x5f,
            0x62, 0x61, 0x73, 0x65, 0x03, 0x02, 0x00, 0x19, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x07,
            0x12, 0x01, 0x00, 0x0f, 0x5f, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x6f,
            0x69, 0x6e, 0x74, 0x65, 0x72, 0x00, 0x4d, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
            0x65, 0x72, 0x73, 0x02, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x01,
            0x04, 0x52, 0x75, 0x73, 0x74, 0x00, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
            0x65, 0x64, 0x2d, 0x62, 0x79, 0x01, 0x05, 0x72, 0x75, 0x73, 0x74, 0x63, 0x1d, 0x31,
            0x2e, 0x35, 0x39, 0x2e, 0x30, 0x20, 0x28, 0x39, 0x64, 0x31, 0x62, 0x32, 0x31, 0x30,
            0x36, 0x65, 0x20, 0x32, 0x30, 0x32, 0x32, 0x2d, 0x30, 0x32, 0x2d, 0x32, 0x33, 0x29,
            0x32, 0x0c, 0x10, 0x00, 0x00, 0x00, 0x00, 0x20, 0x22, 0x00, 0x22, 0x00, 0x01, 0xb2,
            0x00, 0xbf, 0xb9, 0x96, 0x52, 0xd4, 0x19, 0xe3, 0x11, 0xea, 0xa0, 0x0a, 0xe0, 0xab,
            0x1a, 0xa5, 0xe4, 0x2b, 0x5d, 0x32, 0x31, 0x87, 0x7b, 0x25, 0x75, 0xea, 0x98, 0x09,
            0xbc, 0x15, 0xd5, 0xc5, 0x2e, 0x2d, 0x74, 0x0f, 0x76, 0xe9, 0x03, 0x9b, 0x42, 0x5e,
            0x3e, 0xfe, 0x1b, 0x68, 0x86, 0x96, 0x06, 0x98, 0xad, 0x8e, 0x1b, 0xaa, 0xca, 0xa1,
            0xce, 0xa7, 0x72, 0x49, 0x06, 0x33, 0x1a, 0xcc, 0xd2,
        ];
        check_partial_decoding(&input);
    }

    #[test]
    pub fn test_publish_package_with_owner() {
        let input: [u8; 576] = [
            0x5c, 0x21, 0x02, 0x21, 0x02, 0x21, 0x02, 0x21, 0x09, 0x07, 0x01, 0x07, 0x01, 0x0a,
            0xe1, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x46, 0x05, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x0a, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00,
            0x01, 0xb1, 0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62,
            0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59,
            0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x01, 0x01, 0x09, 0x40, 0x42, 0x0f, 0x00,
            0x08, 0x05, 0x00, 0x21, 0x02, 0x20, 0x22, 0x02, 0x25, 0x03, 0x81, 0x03, 0xa1, 0x66,
            0xd4, 0x14, 0x93, 0x48, 0xe4, 0xbb, 0x49, 0xf4, 0xbe, 0xed, 0xe0, 0x81, 0x51, 0x8c,
            0x0a, 0x9f, 0x9c, 0x70, 0xf9, 0x87, 0xbe, 0x26, 0x55, 0xb1, 0x0c, 0x08, 0x6c, 0x6f,
            0x63, 0x6b, 0x5f, 0x66, 0x65, 0x65, 0x20, 0x07, 0x24, 0x5c, 0x21, 0x01, 0xb5, 0x00,
            0x00, 0xe8, 0x89, 0x04, 0x23, 0xc7, 0x8a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x12, 0x03, 0xa3, 0x36, 0xda, 0xe5, 0x40, 0xb7, 0x88, 0x99, 0x56,
            0xf1, 0xf1, 0xd8, 0xd4, 0x6b, 0xa2, 0x3e, 0x5e, 0x44, 0xbf, 0x57, 0x23, 0xae, 0xf2,
            0xa8, 0xe6, 0xb6, 0x98, 0x68, 0x6c, 0x02, 0x58, 0x36, 0x18, 0xa3, 0x15, 0xe8, 0x69,
            0x9a, 0x6d, 0x63, 0xa9, 0x6f, 0x66, 0xf6, 0xfe, 0xeb, 0x60, 0x95, 0x49, 0xbe, 0x26,
            0x88, 0xb9, 0x6b, 0x02, 0x11, 0x9f, 0x26, 0x0a, 0xe6, 0xdf, 0xd0, 0x12, 0xd1, 0x6a,
            0x5d, 0x21, 0x02, 0x82, 0x00, 0x10, 0xc0, 0x88, 0xe0, 0xf1, 0x03, 0x9e, 0x64, 0x18,
            0x65, 0x40, 0xbb, 0xc1, 0x9e, 0xc8, 0x96, 0x7b, 0x97, 0x71, 0x6e, 0x43, 0xb0, 0x01,
            0xde, 0x0e, 0x2b, 0xb7, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x20,
            0x20, 0x02, 0x07, 0x07, 0x32, 0x0c, 0x10, 0x00, 0x00, 0x00, 0x00, 0x07, 0xd2, 0x01,
            0x10, 0x02, 0x00, 0x00, 0x00, 0x30, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x61, 0x73,
            0x6d, 0x01, 0x00, 0x00, 0x00, 0x04, 0x05, 0x01, 0x70, 0x01, 0x01, 0x01, 0x05, 0x03,
            0x01, 0x00, 0x10, 0x06, 0x19, 0x03, 0x7f, 0x01, 0x41, 0x80, 0x80, 0xc0, 0x00, 0x0b,
            0x7f, 0x00, 0x41, 0x80, 0x80, 0xc0, 0x00, 0x0b, 0x7f, 0x00, 0x41, 0x80, 0x80, 0xc0,
            0x00, 0x0b, 0x07, 0x25, 0x03, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x02, 0x00,
            0x0a, 0x5f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x65, 0x6e, 0x64, 0x03, 0x01, 0x0b,
            0x5f, 0x5f, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x03, 0x02, 0x00,
            0x19, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x07, 0x12, 0x01, 0x00, 0x0f, 0x5f, 0x5f, 0x73,
            0x74, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x00, 0x4d,
            0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73, 0x02, 0x08, 0x6c, 0x61,
            0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x01, 0x04, 0x52, 0x75, 0x73, 0x74, 0x00, 0x0c,
            0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x2d, 0x62, 0x79, 0x01, 0x05,
            0x72, 0x75, 0x73, 0x74, 0x63, 0x1d, 0x31, 0x2e, 0x35, 0x39, 0x2e, 0x30, 0x20, 0x28,
            0x39, 0x64, 0x31, 0x62, 0x32, 0x31, 0x30, 0x36, 0x65, 0x20, 0x32, 0x30, 0x32, 0x32,
            0x2d, 0x30, 0x32, 0x2d, 0x32, 0x33, 0x29, 0x32, 0x0c, 0x10, 0x00, 0x00, 0x00, 0x00,
            0x20, 0x22, 0x00, 0x22, 0x00, 0x01, 0xb2, 0x00, 0x1d, 0x03, 0x6a, 0xbf, 0xad, 0xe1,
            0xef, 0x47, 0xe4, 0x30, 0x78, 0x70, 0x0b, 0x30, 0x74, 0xe2, 0xfb, 0x8d, 0x6a, 0x64,
            0xe9, 0x59, 0xd5, 0x3b, 0x2a, 0x63, 0xd8, 0x0f, 0x10, 0x35, 0x12, 0xc8, 0x50, 0x3a,
            0x65, 0x58, 0x70, 0xd4, 0xbc, 0x98, 0xd8, 0x2a, 0xcd, 0x98, 0x3e, 0xf6, 0xd4, 0x78,
            0xbb, 0x08, 0x62, 0xc3, 0x4e, 0x06, 0x46, 0x70, 0x3b, 0x85, 0xab, 0x49, 0xab, 0xe1,
            0x33, 0xf9,
        ];
        check_partial_decoding(&input);
    }

    #[test]
    pub fn test_resource_recall() {
        let input: [u8; 241] = [
            0x5c, 0x21, 0x02, 0x21, 0x02, 0x21, 0x02, 0x21, 0x09, 0x07, 0x01, 0x07, 0x01, 0x0a,
            0xe1, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x46, 0x05, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x0a, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00,
            0x01, 0xb1, 0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62,
            0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59,
            0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x01, 0x01, 0x09, 0x40, 0x42, 0x0f, 0x00,
            0x08, 0x05, 0x00, 0x21, 0x02, 0x20, 0x22, 0x01, 0x14, 0x02, 0x20, 0x07, 0x24, 0x49,
            0xcd, 0x92, 0x35, 0xba, 0x62, 0xb2, 0xc2, 0x17, 0xe3, 0x2e, 0x5b, 0x47, 0x54, 0xc0,
            0x82, 0x19, 0xef, 0x16, 0x38, 0x97, 0x61, 0x35, 0x6e, 0xac, 0xcb, 0xf6, 0xf6, 0xbd,
            0xbf, 0xa4, 0x4d, 0x00, 0x00, 0x00, 0x00, 0xb5, 0x00, 0x00, 0x78, 0x62, 0xa4, 0x41,
            0xa7, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20,
            0x00, 0x20, 0x22, 0x00, 0x22, 0x00, 0x01, 0xb2, 0x01, 0x94, 0x14, 0x11, 0xae, 0x72,
            0x19, 0x9e, 0x9f, 0x76, 0xd9, 0xbe, 0x40, 0x5e, 0x92, 0x6e, 0x97, 0x66, 0x04, 0xae,
            0xcb, 0x86, 0xa3, 0xd1, 0xe2, 0x28, 0x3c, 0x25, 0xea, 0x0d, 0x05, 0xec, 0x7a, 0x4b,
            0x28, 0x40, 0x0e, 0x99, 0x9b, 0x97, 0x6a, 0x87, 0x80, 0x59, 0x71, 0x74, 0x15, 0x85,
            0x00, 0x1f, 0xed, 0x9a, 0xc0, 0x4d, 0xc6, 0xae, 0x54, 0xb8, 0x04, 0x54, 0x21, 0xd3,
            0xa7, 0xf4, 0xb2,
        ];
        check_partial_decoding(&input);
    }

    #[test]
    pub fn test_resource_worktop() {
        let input: [u8; 786] = [
            0x5c, 0x21, 0x02, 0x21, 0x02, 0x21, 0x02, 0x21, 0x09, 0x07, 0x01, 0x07, 0x01, 0x0a,
            0xe1, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x46, 0x05, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x0a, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00,
            0x01, 0xb1, 0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62,
            0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59,
            0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x01, 0x01, 0x09, 0x40, 0x42, 0x0f, 0x00,
            0x08, 0x05, 0x00, 0x21, 0x02, 0x20, 0x22, 0x11, 0x25, 0x03, 0x81, 0x03, 0xd4, 0x3f,
            0x47, 0x9e, 0x9b, 0x2b, 0xeb, 0x9d, 0xf9, 0x8b, 0xc3, 0x88, 0x83, 0x44, 0xfc, 0x25,
            0xed, 0xa1, 0x81, 0xe8, 0xf7, 0x10, 0xce, 0x1b, 0xf1, 0xde, 0x0c, 0x12, 0x77, 0x69,
            0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
            0x6e, 0x74, 0x20, 0x07, 0x40, 0x5c, 0x21, 0x02, 0xb5, 0x00, 0x00, 0xf4, 0x44, 0x82,
            0x91, 0x63, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x01,
            0x02, 0xb5, 0x00, 0x00, 0xc8, 0x4e, 0x67, 0x6d, 0xc1, 0x1b, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x25, 0x03, 0x81, 0x02, 0x92, 0x56, 0x6c, 0x83,
            0xde, 0x7f, 0xd6, 0xb0, 0x4f, 0xcc, 0x92, 0xb5, 0xe0, 0x4b, 0x03, 0x22, 0x8c, 0xcf,
            0xf0, 0x40, 0x78, 0x56, 0x73, 0x27, 0x8e, 0xf1, 0x0c, 0x0b, 0x62, 0x75, 0x79, 0x5f,
            0x67, 0x75, 0x6d, 0x62, 0x61, 0x6c, 0x6c, 0x20, 0x07, 0x08, 0x5c, 0x21, 0x01, 0xa0,
            0x00, 0x00, 0x00, 0x00, 0x05, 0x02, 0xb5, 0x00, 0x00, 0x2c, 0xf6, 0x1a, 0x24, 0xa2,
            0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x01, 0x82,
            0x00, 0xae, 0xdb, 0x79, 0x60, 0xd1, 0xf8, 0x7d, 0xc2, 0x51, 0x38, 0xf4, 0xcd, 0x10,
            0x1d, 0xa6, 0xc9, 0x8d, 0x57, 0x32, 0x34, 0x78, 0xd5, 0x3c, 0x5f, 0xb9, 0x51, 0x00,
            0x01, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x04, 0x0d, 0x01, 0xa0, 0x01, 0x00, 0x00, 0x00, 0x0e, 0x01, 0xa1, 0x02, 0x00, 0x00,
            0x00, 0x0f, 0x01, 0xa1, 0x02, 0x00, 0x00, 0x00, 0x0f, 0x01, 0xa1, 0x03, 0x00, 0x00,
            0x00, 0x25, 0x03, 0x81, 0x03, 0xd4, 0x3f, 0x47, 0x9e, 0x9b, 0x2b, 0xeb, 0x9d, 0xf9,
            0x8b, 0xc3, 0x88, 0x83, 0x44, 0xfc, 0x25, 0xed, 0xa1, 0x81, 0xe8, 0xf7, 0x10, 0xce,
            0x1b, 0xf1, 0xde, 0x0c, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72,
            0x6f, 0x6f, 0x66, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20,
            0x07, 0x40, 0x5c, 0x21, 0x02, 0xb5, 0x00, 0x00, 0xf4, 0x44, 0x82, 0x91, 0x63, 0x45,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x07, 0x00, 0x0f, 0x01,
            0xa1, 0x04, 0x00, 0x00, 0x00, 0x03, 0x01, 0xa0, 0x01, 0x00, 0x00, 0x00, 0x02, 0x02,
            0x20, 0xb7, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x82, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x10, 0x00,
            0x25, 0x03, 0x81, 0x03, 0xd4, 0x3f, 0x47, 0x9e, 0x9b, 0x2b, 0xeb, 0x9d, 0xf9, 0x8b,
            0xc3, 0x88, 0x83, 0x44, 0xfc, 0x25, 0xed, 0xa1, 0x81, 0xe8, 0xf7, 0x10, 0xce, 0x1b,
            0xf1, 0xde, 0x0c, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x62, 0x61,
            0x74, 0x63, 0x68, 0x20, 0x07, 0x05, 0x5c, 0x21, 0x01, 0xa2, 0x00, 0x20, 0x20, 0x00,
            0x20, 0x22, 0x00, 0x22, 0x00, 0x01, 0xb2, 0x01, 0xfd, 0x80, 0xc6, 0x6f, 0x68, 0xe0,
            0x36, 0xc5, 0x08, 0x2d, 0x74, 0x0e, 0x37, 0x05, 0xdb, 0x20, 0x27, 0x70, 0x40, 0x8c,
            0xd6, 0x51, 0x74, 0x75, 0x1d, 0x85, 0x06, 0x9e, 0xc2, 0x94, 0xad, 0xcf, 0x58, 0x59,
            0x30, 0x08, 0x8b, 0xfc, 0xa9, 0x7b, 0xb0, 0x12, 0x07, 0xd8, 0x71, 0xe5, 0xfb, 0xdd,
            0x3b, 0xc7, 0xa4, 0xc2, 0x4c, 0x02, 0x7c, 0x68, 0xda, 0x33, 0x2d, 0xac, 0x8f, 0xb6,
            0x39, 0x97,
        ];
        check_partial_decoding(&input);
    }

    #[test]
    pub fn test_royalty() {
        let input: [u8; 344] = [
            0x5c, 0x21, 0x02, 0x21, 0x02, 0x21, 0x02, 0x21, 0x09, 0x07, 0x01, 0x07, 0x01, 0x0a,
            0xe1, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x46, 0x05, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x0a, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00,
            0x01, 0xb1, 0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62,
            0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59,
            0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x01, 0x01, 0x09, 0x40, 0x42, 0x0f, 0x00,
            0x08, 0x05, 0x00, 0x21, 0x02, 0x20, 0x22, 0x04, 0x16, 0x02, 0x80, 0x01, 0x2b, 0x71,
            0x84, 0xfd, 0x2f, 0x42, 0x6f, 0xb4, 0x34, 0xc7, 0x44, 0xc3, 0x21, 0xcd, 0x91, 0xdf,
            0x83, 0x75, 0xb5, 0xe1, 0xf0, 0x1b, 0x74, 0x00, 0x9d, 0xff, 0x23, 0x0c, 0x21, 0x01,
            0x09, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x02, 0x23, 0x0c, 0x09,
            0x01, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x01, 0x00, 0x00, 0x00, 0x09, 0x00,
            0x00, 0x00, 0x00, 0x17, 0x02, 0x81, 0x02, 0x15, 0x27, 0x0b, 0xf1, 0xb9, 0xa7, 0x60,
            0x13, 0x27, 0x5a, 0x65, 0x46, 0x44, 0x2a, 0x70, 0x7d, 0x86, 0x14, 0xcd, 0xc4, 0x99,
            0x59, 0xff, 0x51, 0x1e, 0x53, 0x21, 0x02, 0x23, 0x0c, 0x09, 0x01, 0x06, 0x6d, 0x65,
            0x74, 0x68, 0x6f, 0x64, 0x01, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x18,
            0x01, 0x80, 0x01, 0x2b, 0x71, 0x84, 0xfd, 0x2f, 0x42, 0x6f, 0xb4, 0x34, 0xc7, 0x44,
            0xc3, 0x21, 0xcd, 0x91, 0xdf, 0x83, 0x75, 0xb5, 0xe1, 0xf0, 0x1b, 0x74, 0x00, 0x9d,
            0xff, 0x19, 0x01, 0x81, 0x02, 0x15, 0x27, 0x0b, 0xf1, 0xb9, 0xa7, 0x60, 0x13, 0x27,
            0x5a, 0x65, 0x46, 0x44, 0x2a, 0x70, 0x7d, 0x86, 0x14, 0xcd, 0xc4, 0x99, 0x59, 0xff,
            0x51, 0x1e, 0x53, 0x20, 0x20, 0x00, 0x20, 0x22, 0x00, 0x22, 0x00, 0x01, 0xb2, 0x01,
            0x74, 0xe2, 0xa0, 0x0e, 0xbd, 0x46, 0x7a, 0x9a, 0x12, 0xfd, 0xd6, 0x67, 0x0b, 0x50,
            0x9a, 0x58, 0xd7, 0xb9, 0x87, 0x85, 0x83, 0x8d, 0x90, 0x18, 0xd9, 0x89, 0xea, 0x14,
            0x8c, 0x3a, 0x1a, 0xf5, 0x62, 0x61, 0x4c, 0x35, 0x52, 0xb9, 0x9e, 0xef, 0xa6, 0xee,
            0xd7, 0x59, 0xd3, 0x94, 0x0e, 0x6a, 0xfa, 0x14, 0x7c, 0x92, 0xf8, 0x26, 0x39, 0xb1,
            0x25, 0x67, 0x4c, 0x99, 0xae, 0x8c, 0x95, 0x4d,
        ];
        check_partial_decoding(&input);
    }

    #[test]
    pub fn test_values() {
        let input: [u8; 1736] = [
            0x5c, 0x21, 0x02, 0x21, 0x02, 0x21, 0x02, 0x21, 0x09, 0x07, 0x01, 0x07, 0x01, 0x0a,
            0xe1, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x46, 0x05, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x0a, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00,
            0x01, 0xb1, 0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62,
            0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59,
            0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x01, 0x01, 0x09, 0x40, 0x42, 0x0f, 0x00,
            0x08, 0x05, 0x00, 0x21, 0x02, 0x20, 0x22, 0x05, 0x00, 0x01, 0x82, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x0a, 0x01, 0x82, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x25, 0x03,
            0x81, 0x02, 0x92, 0x56, 0x6c, 0x83, 0xde, 0x7f, 0xd6, 0xb0, 0x4f, 0xcc, 0x92, 0xb5,
            0xe0, 0x4b, 0x03, 0x22, 0x8c, 0xcf, 0xf0, 0x40, 0x78, 0x56, 0x73, 0x27, 0x8e, 0xf1,
            0x0c, 0x15, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x6f, 0x6d, 0x65, 0x5f, 0x62, 0x61,
            0x73, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x20, 0x07, 0x05, 0x5c, 0x21,
            0x01, 0x21, 0x00, 0x25, 0x03, 0x81, 0x02, 0x92, 0x56, 0x6c, 0x83, 0xde, 0x7f, 0xd6,
            0xb0, 0x4f, 0xcc, 0x92, 0xb5, 0xe0, 0x4b, 0x03, 0x22, 0x8c, 0xcf, 0xf0, 0x40, 0x78,
            0x56, 0x73, 0x27, 0x8e, 0xf1, 0x0c, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x61, 0x6c,
            0x69, 0x61, 0x73, 0x65, 0x73, 0x20, 0x07, 0xa7, 0x04, 0x5c, 0x21, 0x18, 0x22, 0x00,
            0x00, 0x22, 0x00, 0x00, 0x22, 0x01, 0x01, 0x0c, 0x05, 0x68, 0x65, 0x6c, 0x6c, 0x6f,
            0x22, 0x01, 0x01, 0x0c, 0x05, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x22, 0x00, 0x01, 0x0c,
            0x04, 0x74, 0x65, 0x73, 0x74, 0x22, 0x00, 0x01, 0x0c, 0x04, 0x74, 0x65, 0x73, 0x74,
            0x22, 0x01, 0x01, 0x0c, 0x07, 0x74, 0x65, 0x73, 0x74, 0x31, 0x32, 0x33, 0x22, 0x01,
            0x01, 0x0c, 0x07, 0x74, 0x65, 0x73, 0x74, 0x31, 0x32, 0x33, 0x22, 0x00, 0x00, 0x22,
            0x01, 0x01, 0x0c, 0x01, 0x61, 0x22, 0x00, 0x01, 0x0c, 0x01, 0x62, 0x22, 0x01, 0x01,
            0x0c, 0x01, 0x63, 0x20, 0x07, 0x04, 0xde, 0xad, 0xbe, 0xef, 0x20, 0x07, 0x03, 0x05,
            0x0a, 0xff, 0x21, 0x02, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x04, 0xb7, 0x00, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x21, 0x02,
            0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
            0xb7, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7b, 0x21, 0x02, 0x82, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xb7, 0x01,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc8, 0x21, 0x02, 0x82, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xb7, 0x02, 0x21, 0x03,
            0x1b, 0x84, 0xc5, 0x56, 0x7b, 0x12, 0x64, 0x40, 0x99, 0x5d, 0x3e, 0xd5, 0xaa, 0xba,
            0x05, 0x65, 0xd7, 0x1e, 0x18, 0x34, 0x60, 0x48, 0x19, 0xff, 0x9c, 0x17, 0xf5, 0xe9,
            0xd5, 0xdd, 0x07, 0x8f, 0x21, 0x02, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xb7, 0x01, 0x00, 0x00, 0x00, 0x00, 0x49, 0x96,
            0x02, 0xd2, 0x21, 0x02, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x04, 0xb7, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
            0x20, 0x20, 0x02, 0x07, 0x02, 0xde, 0xad, 0x07, 0x03, 0x05, 0x0a, 0xff, 0x20, 0x20,
            0x02, 0x07, 0x02, 0xde, 0xad, 0x07, 0x03, 0x05, 0x0a, 0xff, 0x20, 0x21, 0x02, 0x02,
            0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
            0xb7, 0x00, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x02, 0x82, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xb7, 0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x01, 0x20, 0x21, 0x02, 0x02, 0x82, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xb7, 0x00, 0x05, 0x76, 0x61,
            0x6c, 0x75, 0x65, 0x02, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x04, 0xb7, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
            0x25, 0x03, 0x81, 0x02, 0x92, 0x56, 0x6c, 0x83, 0xde, 0x7f, 0xd6, 0xb0, 0x4f, 0xcc,
            0x92, 0xb5, 0xe0, 0x4b, 0x03, 0x22, 0x8c, 0xcf, 0xf0, 0x40, 0x78, 0x56, 0x73, 0x27,
            0x8e, 0xf1, 0x0c, 0x1d, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x73,
            0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
            0x74, 0x79, 0x70, 0x65, 0x73, 0x20, 0x07, 0xb2, 0x04, 0x5c, 0x21, 0x13, 0x80, 0x01,
            0x00, 0x2c, 0x64, 0xcc, 0x99, 0x11, 0xa7, 0x8b, 0xdf, 0x9f, 0xdd, 0xde, 0x5f, 0x5a,
            0x9d, 0xc4, 0x88, 0xec, 0xeb, 0xc5, 0xd5, 0x23, 0xbb, 0x0f, 0xcf, 0x9e, 0x81, 0x03,
            0xf8, 0x54, 0x1b, 0x2e, 0x91, 0xa4, 0x79, 0xdc, 0xdc, 0xec, 0x31, 0x75, 0xdd, 0x5b,
            0x46, 0x67, 0x8d, 0xf5, 0x57, 0x0d, 0x90, 0xe1, 0x45, 0xf0, 0x2b, 0xbf, 0x82, 0x00,
            0x0f, 0x8e, 0x92, 0x0a, 0xa7, 0x9f, 0x53, 0x34, 0x9d, 0x0a, 0x99, 0x74, 0x6e, 0x17,
            0xb5, 0x92, 0x41, 0xbd, 0x51, 0xe1, 0x9a, 0xbb, 0x50, 0xad, 0x6b, 0x6a, 0x81, 0x04,
            0xf2, 0x70, 0x72, 0xb0, 0xc9, 0x18, 0x24, 0xa1, 0xa5, 0xa8, 0x62, 0x23, 0x8e, 0x58,
            0x6f, 0xe2, 0xc7, 0xcd, 0x37, 0x61, 0xeb, 0x2e, 0x34, 0x3c, 0xda, 0xbe, 0xa3, 0x36,
            0xda, 0xe5, 0x40, 0xb7, 0x88, 0x99, 0x56, 0xf1, 0xf1, 0xd8, 0xd4, 0x6b, 0xa2, 0x3e,
            0x5e, 0x44, 0xbf, 0x57, 0x23, 0xae, 0xf2, 0xa8, 0xe6, 0xb6, 0x98, 0x68, 0x6c, 0x02,
            0x58, 0x36, 0x18, 0xa0, 0x00, 0x00, 0x00, 0x00, 0xa1, 0x01, 0x00, 0x00, 0x00, 0xa2,
            0x00, 0xb0, 0x2c, 0xf2, 0x4d, 0xba, 0x5f, 0xb0, 0xa3, 0x0e, 0x26, 0xe8, 0x3b, 0x2a,
            0xc5, 0xb9, 0xe2, 0x9e, 0x1b, 0x16, 0x1e, 0x5c, 0x1f, 0xa7, 0x42, 0x5e, 0x73, 0x04,
            0x33, 0x62, 0x93, 0x8b, 0x98, 0x24, 0xb1, 0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc,
            0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb,
            0x2d, 0xce, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0xb2, 0x00,
            0x79, 0x22, 0x4e, 0xa5, 0x14, 0x20, 0x67, 0x06, 0x29, 0x8d, 0x8d, 0x62, 0x0f, 0x66,
            0x08, 0x28, 0xf7, 0x98, 0x70, 0x68, 0xd6, 0xd0, 0x27, 0x57, 0xe6, 0xf3, 0xcb, 0xbf,
            0x4a, 0x51, 0xab, 0x13, 0x33, 0x95, 0xdb, 0x69, 0xdb, 0x1b, 0xc9, 0xb2, 0x72, 0x6d,
            0xd9, 0x9e, 0x34, 0xef, 0xc2, 0x52, 0xd8, 0x25, 0x8d, 0xcb, 0x00, 0x3e, 0xba, 0xba,
            0x42, 0xbe, 0x34, 0x9f, 0x50, 0xf7, 0x76, 0x5e, 0xb3, 0x4c, 0xb5, 0xab, 0xf6, 0xad,
            0x79, 0xfb, 0xf5, 0xab, 0xbc, 0xca, 0xfc, 0xc2, 0x69, 0xd8, 0x5c, 0xd2, 0x65, 0x1e,
            0xd4, 0xb8, 0x85, 0xb5, 0x86, 0x9f, 0x24, 0x1a, 0xed, 0xf0, 0xa5, 0xba, 0x29, 0xb4,
            0xce, 0x99, 0x3a, 0xdc, 0x51, 0x11, 0x13, 0x09, 0xa0, 0x41, 0xfa, 0xa6, 0x5c, 0xbc,
            0xf1, 0x15, 0x4d, 0x21, 0xed, 0x0e, 0xcd, 0xc2, 0xd5, 0x40, 0x70, 0xbc, 0x90, 0xb9,
            0xde, 0xb7, 0x44, 0xaa, 0x86, 0x05, 0xb3, 0xf6, 0x86, 0xfa, 0x17, 0x8f, 0xba, 0x21,
            0x07, 0x0b, 0x4a, 0x46, 0x78, 0xe5, 0x4e, 0xee, 0x34, 0x86, 0xa8, 0x81, 0xe0, 0xe3,
            0x28, 0x25, 0x1c, 0xd3, 0x79, 0x66, 0xde, 0x09, 0xb5, 0x00, 0x00, 0x78, 0x62, 0xa4,
            0x41, 0xa7, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb6,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xce, 0xbe, 0xe5, 0x18, 0xac, 0xe9,
            0xdd, 0x1d, 0x50, 0xb6, 0x62, 0x06, 0x59, 0x92, 0x19, 0x4b, 0x9e, 0x2b, 0x1d, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb7, 0x00, 0x06, 0x53, 0x6f, 0x6d,
            0x65, 0x49, 0x64, 0xb7, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0xb7,
            0x02, 0x21, 0x03, 0x1b, 0x84, 0xc5, 0x56, 0x7b, 0x12, 0x64, 0x40, 0x99, 0x5d, 0x3e,
            0xd5, 0xaa, 0xba, 0x05, 0x65, 0xd7, 0x1e, 0x18, 0x34, 0x60, 0x48, 0x19, 0xff, 0x9c,
            0x17, 0xf5, 0xe9, 0xd5, 0xdd, 0x07, 0x8f, 0xb7, 0x03, 0x43, 0x96, 0x8a, 0x72, 0x59,
            0x54, 0x45, 0xda, 0x96, 0x78, 0x86, 0x59, 0xdd, 0x39, 0x9f, 0xaa, 0x20, 0x20, 0x02,
            0x07, 0x07, 0x32, 0x0c, 0x10, 0x00, 0x00, 0x00, 0x00, 0x07, 0xd2, 0x01, 0x10, 0x02,
            0x00, 0x00, 0x00, 0x30, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x61, 0x73, 0x6d, 0x01,
            0x00, 0x00, 0x00, 0x04, 0x05, 0x01, 0x70, 0x01, 0x01, 0x01, 0x05, 0x03, 0x01, 0x00,
            0x10, 0x06, 0x19, 0x03, 0x7f, 0x01, 0x41, 0x80, 0x80, 0xc0, 0x00, 0x0b, 0x7f, 0x00,
            0x41, 0x80, 0x80, 0xc0, 0x00, 0x0b, 0x7f, 0x00, 0x41, 0x80, 0x80, 0xc0, 0x00, 0x0b,
            0x07, 0x25, 0x03, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x02, 0x00, 0x0a, 0x5f,
            0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x65, 0x6e, 0x64, 0x03, 0x01, 0x0b, 0x5f, 0x5f,
            0x68, 0x65, 0x61, 0x70, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x03, 0x02, 0x00, 0x19, 0x04,
            0x6e, 0x61, 0x6d, 0x65, 0x07, 0x12, 0x01, 0x00, 0x0f, 0x5f, 0x5f, 0x73, 0x74, 0x61,
            0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x00, 0x4d, 0x09, 0x70,
            0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73, 0x02, 0x08, 0x6c, 0x61, 0x6e, 0x67,
            0x75, 0x61, 0x67, 0x65, 0x01, 0x04, 0x52, 0x75, 0x73, 0x74, 0x00, 0x0c, 0x70, 0x72,
            0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x2d, 0x62, 0x79, 0x01, 0x05, 0x72, 0x75,
            0x73, 0x74, 0x63, 0x1d, 0x31, 0x2e, 0x35, 0x39, 0x2e, 0x30, 0x20, 0x28, 0x39, 0x64,
            0x31, 0x62, 0x32, 0x31, 0x30, 0x36, 0x65, 0x20, 0x32, 0x30, 0x32, 0x32, 0x2d, 0x30,
            0x32, 0x2d, 0x32, 0x33, 0x29, 0x32, 0x0c, 0x10, 0x00, 0x00, 0x00, 0x00, 0x20, 0x22,
            0x00, 0x22, 0x00, 0x01, 0xb2, 0x01, 0xb7, 0xe5, 0x56, 0x2c, 0xf5, 0xec, 0xbb, 0x9b,
            0x7d, 0xbf, 0x19, 0xd7, 0xcd, 0x1c, 0x6c, 0x78, 0x38, 0x18, 0x87, 0x25, 0x7b, 0x0d,
            0x73, 0x8a, 0x34, 0xa4, 0xb3, 0x65, 0xb9, 0x07, 0xa4, 0x67, 0x6a, 0x1b, 0x9c, 0xb1,
            0xfc, 0x10, 0x70, 0xb8, 0x7a, 0xc3, 0x47, 0x43, 0xa0, 0xa9, 0xa9, 0x16, 0x0b, 0xd1,
            0xdf, 0xce, 0xfc, 0xce, 0x84, 0x25, 0xdb, 0xf3, 0xed, 0xa3, 0x4d, 0xad, 0xe2, 0xe4,
        ];
        check_partial_decoding(&input);
    }
}
